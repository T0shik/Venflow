{
  "api/index.html": {
    "href": "api/index.html",
    "title": "The API Docs of Venflow | Venflow Documentation",
    "keywords": "Welcome to the API Documentation of Venflow Here you will be able to find all the public API's and there descriptions."
  },
  "api/Venflow.Commands.html": {
    "href": "api/Venflow.Commands.html",
    "title": "Namespace Venflow.Commands | Venflow Documentation",
    "keywords": "Namespace Venflow.Commands Interfaces IBaseInsertRelationBuilder<TRelationEntity, TRootEntity> Represents a base insert relation builder to configure the insert. IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn> Represents a base query relation builder to configure the query. IDeleteCommand<TEntity> Represents a command which performs deletions of entities. IDeleteCommandBuilder<TEntity> Represents a command builder to configure the deletion. IInsertCommand<TEntity> Represents a command which performs insertions of entities. IInsertCommandBuilder<TEntity> Represents a command builder to configure the insertion. IInsertRelationBuilder<TRelationEntity, TRootEntity> Represents a insert relation builder to configure the insert. IPreCommandBuilder<TEntity, TReturn> Represents a pre-command builder to configure the query. IQueryCommand<TEntity, TReturn> Represents a command which performs queries and materialize the results to entities. IQueryCommandBuilder<TEntity, TReturn> Represents a command builder to configure the query. IQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn> Represents a query relation builder to configure the query. ISpecficVenflowCommandBuilder<TCommand, TLogResult> Represents a generic command builder for all CRUD operations to finalize the configuration. IUpdateCommand<TEntity> Represents a command which performs updates of entities. IUpdateCommandBuilder<TEntity> Represents a command builder to configure the update. IVenflowCommand<TEntity> The base command for all other CRUD commands. IVenflowCommandBuilder<TEntity> Represents a generic command builder to create any CRUD command."
  },
  "api/Venflow.Commands.IBaseInsertRelationBuilder-2.html": {
    "href": "api/Venflow.Commands.IBaseInsertRelationBuilder-2.html",
    "title": "Interface IBaseInsertRelationBuilder<TRelationEntity, TRootEntity> | Venflow Documentation",
    "keywords": "Interface IBaseInsertRelationBuilder<TRelationEntity, TRootEntity> Represents a base insert relation builder to configure the insert. Inherited Members IInsertCommandBuilder<TRootEntity>.InsertAsync(TRootEntity, CancellationToken) IInsertCommandBuilder<TRootEntity>.InsertAsync(IList<TRootEntity>, CancellationToken) ISpecficVenflowCommandBuilder<IInsertCommand<TRootEntity>, IBaseInsertRelationBuilder<TRootEntity, TRootEntity>>.Build() ISpecficVenflowCommandBuilder<IInsertCommand<TRootEntity>, IBaseInsertRelationBuilder<TRootEntity, TRootEntity>>.Log(Boolean) ISpecficVenflowCommandBuilder<IInsertCommand<TRootEntity>, IBaseInsertRelationBuilder<TRootEntity, TRootEntity>>.LogTo(LoggerCallback) ISpecficVenflowCommandBuilder<IInsertCommand<TRootEntity>, IBaseInsertRelationBuilder<TRootEntity, TRootEntity>>.LogTo(LoggerCallback[]) Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface IBaseInsertRelationBuilder<TRelationEntity, TRootEntity> : IInsertCommandBuilder<TRootEntity>, ISpecficVenflowCommandBuilder<IInsertCommand<TRootEntity>, IBaseInsertRelationBuilder<TRootEntity, TRootEntity>> where TRelationEntity : class, new() where TRootEntity : class, new() Type Parameters Name Description TRelationEntity The type of the entity which will be joined with. TRootEntity The root type of the entity. Methods | Improve this Doc View Source With<TToEntity>(Expression<Func<TRootEntity, TToEntity>>) Allows to configure the inserted relations with the current insert. Declaration IInsertRelationBuilder<TToEntity, TRootEntity> With<TToEntity>(Expression<Func<TRootEntity, TToEntity>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRootEntity, TToEntity>> propertySelector A lambda expression representing the navigation property which should get inserted with the root entity during insertion. Returns Type Description IInsertRelationBuilder <TToEntity, TRootEntity> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the inserted entity. | Improve this Doc View Source With<TToEntity>(Expression<Func<TRootEntity, IList<TToEntity>>>) Allows to configure the inserted relations with the current insert. Declaration IInsertRelationBuilder<TToEntity, TRootEntity> With<TToEntity>(Expression<Func<TRootEntity, IList<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRootEntity, IList <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get inserted with the root entity during insertion. Returns Type Description IInsertRelationBuilder <TToEntity, TRootEntity> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the inserted entity. | Improve this Doc View Source With<TToEntity>(Expression<Func<TRootEntity, List<TToEntity>>>) Allows to configure the inserted relations with the current insert. Declaration IInsertRelationBuilder<TToEntity, TRootEntity> With<TToEntity>(Expression<Func<TRootEntity, List<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRootEntity, List <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get inserted with the root entity during insertion. Returns Type Description IInsertRelationBuilder <TToEntity, TRootEntity> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the inserted entity. | Improve this Doc View Source WithAll() Allows to configure the current insert, to insert all populated relations which can be reached. Declaration IBaseInsertRelationBuilder<TRootEntity, TRootEntity> WithAll() Returns Type Description IBaseInsertRelationBuilder <TRootEntity, TRootEntity> An object that can be used to further configure the operation."
  },
  "api/Venflow.Commands.IBaseQueryRelationBuilder-3.html": {
    "href": "api/Venflow.Commands.IBaseQueryRelationBuilder-3.html",
    "title": "Interface IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn> | Venflow Documentation",
    "keywords": "Interface IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn> Represents a base query relation builder to configure the query. Inherited Members IPreCommandBuilder<TRootEntity, TReturn>.AddFormatter() IQueryCommandBuilder<TRootEntity, TReturn>.TrackChanges(Boolean) IQueryCommandBuilder<TRootEntity, TReturn>.QueryAsync(CancellationToken) ISpecficVenflowCommandBuilder<IQueryCommand<TRootEntity, TReturn>, IBaseQueryRelationBuilder<TRootEntity, TRootEntity, TReturn>>.Build() ISpecficVenflowCommandBuilder<IQueryCommand<TRootEntity, TReturn>, IBaseQueryRelationBuilder<TRootEntity, TRootEntity, TReturn>>.Log(Boolean) ISpecficVenflowCommandBuilder<IQueryCommand<TRootEntity, TReturn>, IBaseQueryRelationBuilder<TRootEntity, TRootEntity, TReturn>>.LogTo(LoggerCallback) ISpecficVenflowCommandBuilder<IQueryCommand<TRootEntity, TReturn>, IBaseQueryRelationBuilder<TRootEntity, TRootEntity, TReturn>>.LogTo(LoggerCallback[]) Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn> : IPreCommandBuilder<TRootEntity, TReturn>, IQueryCommandBuilder<TRootEntity, TReturn>, ISpecficVenflowCommandBuilder<IQueryCommand<TRootEntity, TReturn>, IBaseQueryRelationBuilder<TRootEntity, TRootEntity, TReturn>> where TRelationEntity : class, new() where TRootEntity : class, new() where TReturn : class, new() Type Parameters Name Description TRelationEntity The type of the entity which will be joined with. TRootEntity The root type of the entity. TReturn The return type of the query. Methods | Improve this Doc View Source FullJoinWith<TToEntity>(Expression<Func<TRootEntity, TToEntity>>) Allows to configure materialized full joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> FullJoinWith<TToEntity>(Expression<Func<TRootEntity, TToEntity>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRootEntity, TToEntity>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source FullJoinWith<TToEntity>(Expression<Func<TRootEntity, IList<TToEntity>>>) Allows to configure materialized full joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> FullJoinWith<TToEntity>(Expression<Func<TRootEntity, IList<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRootEntity, IList <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source FullJoinWith<TToEntity>(Expression<Func<TRootEntity, List<TToEntity>>>) Allows to configure materialized full joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> FullJoinWith<TToEntity>(Expression<Func<TRootEntity, List<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRootEntity, List <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source JoinWith<TToEntity>(Expression<Func<TRootEntity, TToEntity>>, JoinBehaviour) Allows to configure materialized joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> JoinWith<TToEntity>(Expression<Func<TRootEntity, TToEntity>> propertySelector, JoinBehaviour joinBehaviour = JoinBehaviour.InnerJoin) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRootEntity, TToEntity>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. JoinBehaviour joinBehaviour Configures the type of this join. You are not forced to use this parameter! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to define it. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. | Improve this Doc View Source JoinWith<TToEntity>(Expression<Func<TRootEntity, IList<TToEntity>>>, JoinBehaviour) Allows to configure materialized joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> JoinWith<TToEntity>(Expression<Func<TRootEntity, IList<TToEntity>>> propertySelector, JoinBehaviour joinBehaviour = JoinBehaviour.InnerJoin) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRootEntity, IList <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. JoinBehaviour joinBehaviour Configures the type of this join. You are not forced to use this parameter! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to define it. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. | Improve this Doc View Source JoinWith<TToEntity>(Expression<Func<TRootEntity, List<TToEntity>>>, JoinBehaviour) Allows to configure materialized joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> JoinWith<TToEntity>(Expression<Func<TRootEntity, List<TToEntity>>> propertySelector, JoinBehaviour joinBehaviour = JoinBehaviour.InnerJoin) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRootEntity, List <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. JoinBehaviour joinBehaviour Configures the type of this join. You are not forced to use this parameter! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to define it. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. | Improve this Doc View Source LeftJoinWith<TToEntity>(Expression<Func<TRootEntity, TToEntity>>) Allows to configure materialized left joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> LeftJoinWith<TToEntity>(Expression<Func<TRootEntity, TToEntity>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRootEntity, TToEntity>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source LeftJoinWith<TToEntity>(Expression<Func<TRootEntity, IList<TToEntity>>>) Allows to configure materialized left joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> LeftJoinWith<TToEntity>(Expression<Func<TRootEntity, IList<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRootEntity, IList <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source LeftJoinWith<TToEntity>(Expression<Func<TRootEntity, List<TToEntity>>>) Allows to configure materialized left joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> LeftJoinWith<TToEntity>(Expression<Func<TRootEntity, List<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRootEntity, List <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source RightJoinWith<TToEntity>(Expression<Func<TRootEntity, TToEntity>>) Allows to configure materialized right joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> RightJoinWith<TToEntity>(Expression<Func<TRootEntity, TToEntity>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRootEntity, TToEntity>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source RightJoinWith<TToEntity>(Expression<Func<TRootEntity, IList<TToEntity>>>) Allows to configure materialized right joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> RightJoinWith<TToEntity>(Expression<Func<TRootEntity, IList<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRootEntity, IList <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source RightJoinWith<TToEntity>(Expression<Func<TRootEntity, List<TToEntity>>>) Allows to configure materialized right joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> RightJoinWith<TToEntity>(Expression<Func<TRootEntity, List<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRootEntity, List <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods."
  },
  "api/Venflow.Commands.IDeleteCommand-1.html": {
    "href": "api/Venflow.Commands.IDeleteCommand-1.html",
    "title": "Interface IDeleteCommand<TEntity> | Venflow Documentation",
    "keywords": "Interface IDeleteCommand<TEntity> Represents a command which performs deletions of entities. Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface IDeleteCommand<TEntity> : IVenflowCommand<TEntity>, IAsyncDisposable where TEntity : class, new() Type Parameters Name Description TEntity The type of the entity which will be deleted. Methods | Improve this Doc View Source DeleteAsync(TEntity, CancellationToken) Asynchronously deletes a single entity. Declaration ValueTask<int> DeleteAsync(TEntity entity, CancellationToken cancellationToken = null) Parameters Type Name Description TEntity entity The entity instance which should be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. | Improve this Doc View Source DeleteAsync(TEntity[], CancellationToken) Asynchronously deletes a set of entity. Declaration ValueTask<int> DeleteAsync(TEntity[] entities, CancellationToken cancellationToken = null) Parameters Type Name Description TEntity[] entities The entity instances which should be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. | Improve this Doc View Source DeleteAsync(IEnumerable<TEntity>, CancellationToken) Asynchronously deletes a set of entity. Declaration ValueTask<int> DeleteAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable <TEntity> entities The entity instances which should be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. | Improve this Doc View Source DeleteAsync(IList<TEntity>, CancellationToken) Asynchronously deletes a set of entity. Declaration ValueTask<int> DeleteAsync(IList<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IList <TEntity> entities The entity instances which should be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. | Improve this Doc View Source DeleteAsync(List<TEntity>, CancellationToken) Asynchronously deletes a set of entity. Declaration ValueTask<int> DeleteAsync(List<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description List <TEntity> entities The entity instances which should be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise."
  },
  "api/Venflow.Commands.IDeleteCommandBuilder-1.html": {
    "href": "api/Venflow.Commands.IDeleteCommandBuilder-1.html",
    "title": "Interface IDeleteCommandBuilder<TEntity> | Venflow Documentation",
    "keywords": "Interface IDeleteCommandBuilder<TEntity> Represents a command builder to configure the deletion. Inherited Members ISpecficVenflowCommandBuilder<IDeleteCommand<TEntity>, IDeleteCommandBuilder<TEntity>>.Build() ISpecficVenflowCommandBuilder<IDeleteCommand<TEntity>, IDeleteCommandBuilder<TEntity>>.Log(Boolean) ISpecficVenflowCommandBuilder<IDeleteCommand<TEntity>, IDeleteCommandBuilder<TEntity>>.LogTo(LoggerCallback) ISpecficVenflowCommandBuilder<IDeleteCommand<TEntity>, IDeleteCommandBuilder<TEntity>>.LogTo(LoggerCallback[]) Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface IDeleteCommandBuilder<TEntity> : ISpecficVenflowCommandBuilder<IDeleteCommand<TEntity>, IDeleteCommandBuilder<TEntity>> where TEntity : class, new() Type Parameters Name Description TEntity The type of the entity which will be deleted. Methods | Improve this Doc View Source DeleteAsync(TEntity, CancellationToken) Asynchronously deletes a single entity. Declaration ValueTask<int> DeleteAsync(TEntity entity, CancellationToken cancellationToken = null) Parameters Type Name Description TEntity entity The entity instance which should be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. | Improve this Doc View Source DeleteAsync(TEntity[], CancellationToken) Asynchronously deletes a set of entity. Declaration ValueTask<int> DeleteAsync(TEntity[] entities, CancellationToken cancellationToken = null) Parameters Type Name Description TEntity[] entities The entity instances which should be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. | Improve this Doc View Source DeleteAsync(IEnumerable<TEntity>, CancellationToken) Asynchronously deletes a set of entity. Declaration ValueTask<int> DeleteAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable <TEntity> entities The entity instances which should be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. | Improve this Doc View Source DeleteAsync(IList<TEntity>, CancellationToken) Asynchronously deletes a set of entity. Declaration ValueTask<int> DeleteAsync(IList<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IList <TEntity> entities The entity instances which should be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. | Improve this Doc View Source DeleteAsync(List<TEntity>, CancellationToken) Asynchronously deletes a set of entity. Declaration ValueTask<int> DeleteAsync(List<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description List <TEntity> entities The entity instances which should be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise."
  },
  "api/Venflow.Commands.IInsertCommand-1.html": {
    "href": "api/Venflow.Commands.IInsertCommand-1.html",
    "title": "Interface IInsertCommand<TEntity> | Venflow Documentation",
    "keywords": "Interface IInsertCommand<TEntity> Represents a command which performs insertions of entities. Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface IInsertCommand<TEntity> : IVenflowCommand<TEntity>, IAsyncDisposable where TEntity : class, new() Type Parameters Name Description TEntity The type of the entity which will be inserted. Methods | Improve this Doc View Source InsertAsync(TEntity, CancellationToken) Asynchronously inserts a single entity. Declaration Task<int> InsertAsync(TEntity entity, CancellationToken cancellationToken = null) Parameters Type Name Description TEntity entity The entity instance which should be inserted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description Task < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; 0 otherwise. | Improve this Doc View Source InsertAsync(IList<TEntity>, CancellationToken) Asynchronously inserts a set of entities. Declaration Task<int> InsertAsync(IList<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IList <TEntity> entities The entity instances which should be inserted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description Task < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; 0 otherwise."
  },
  "api/Venflow.Commands.IInsertCommandBuilder-1.html": {
    "href": "api/Venflow.Commands.IInsertCommandBuilder-1.html",
    "title": "Interface IInsertCommandBuilder<TEntity> | Venflow Documentation",
    "keywords": "Interface IInsertCommandBuilder<TEntity> Represents a command builder to configure the insertion. Inherited Members ISpecficVenflowCommandBuilder<IInsertCommand<TEntity>, IBaseInsertRelationBuilder<TEntity, TEntity>>.Build() ISpecficVenflowCommandBuilder<IInsertCommand<TEntity>, IBaseInsertRelationBuilder<TEntity, TEntity>>.Log(Boolean) ISpecficVenflowCommandBuilder<IInsertCommand<TEntity>, IBaseInsertRelationBuilder<TEntity, TEntity>>.LogTo(LoggerCallback) ISpecficVenflowCommandBuilder<IInsertCommand<TEntity>, IBaseInsertRelationBuilder<TEntity, TEntity>>.LogTo(LoggerCallback[]) Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface IInsertCommandBuilder<TEntity> : ISpecficVenflowCommandBuilder<IInsertCommand<TEntity>, IBaseInsertRelationBuilder<TEntity, TEntity>> where TEntity : class, new() Type Parameters Name Description TEntity The type of the entity which will be inserted. Methods | Improve this Doc View Source InsertAsync(TEntity, CancellationToken) Asynchronously inserts a single entity. Declaration Task<int> InsertAsync(TEntity entity, CancellationToken cancellationToken = null) Parameters Type Name Description TEntity entity The entity instance which should be inserted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description Task < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; 0 otherwise. | Improve this Doc View Source InsertAsync(IList<TEntity>, CancellationToken) Asynchronously inserts a set of entities. Declaration Task<int> InsertAsync(IList<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IList <TEntity> entities The entity instances which should be inserted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description Task < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; 0 otherwise."
  },
  "api/Venflow.Commands.IInsertRelationBuilder-2.html": {
    "href": "api/Venflow.Commands.IInsertRelationBuilder-2.html",
    "title": "Interface IInsertRelationBuilder<TRelationEntity, TRootEntity> | Venflow Documentation",
    "keywords": "Interface IInsertRelationBuilder<TRelationEntity, TRootEntity> Represents a insert relation builder to configure the insert. Inherited Members IBaseInsertRelationBuilder<TRelationEntity, TRootEntity>.WithAll() IBaseInsertRelationBuilder<TRelationEntity, TRootEntity>.With<TToEntity>(Expression<Func<TRootEntity, TToEntity>>) IBaseInsertRelationBuilder<TRelationEntity, TRootEntity>.With<TToEntity>(Expression<Func<TRootEntity, IList<TToEntity>>>) IBaseInsertRelationBuilder<TRelationEntity, TRootEntity>.With<TToEntity>(Expression<Func<TRootEntity, List<TToEntity>>>) IInsertCommandBuilder<TRootEntity>.InsertAsync(TRootEntity, CancellationToken) IInsertCommandBuilder<TRootEntity>.InsertAsync(IList<TRootEntity>, CancellationToken) ISpecficVenflowCommandBuilder<IInsertCommand<TRootEntity>, IBaseInsertRelationBuilder<TRootEntity, TRootEntity>>.Build() ISpecficVenflowCommandBuilder<IInsertCommand<TRootEntity>, IBaseInsertRelationBuilder<TRootEntity, TRootEntity>>.Log(Boolean) ISpecficVenflowCommandBuilder<IInsertCommand<TRootEntity>, IBaseInsertRelationBuilder<TRootEntity, TRootEntity>>.LogTo(LoggerCallback) ISpecficVenflowCommandBuilder<IInsertCommand<TRootEntity>, IBaseInsertRelationBuilder<TRootEntity, TRootEntity>>.LogTo(LoggerCallback[]) Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface IInsertRelationBuilder<TRelationEntity, TRootEntity> : IBaseInsertRelationBuilder<TRelationEntity, TRootEntity>, IInsertCommandBuilder<TRootEntity>, ISpecficVenflowCommandBuilder<IInsertCommand<TRootEntity>, IBaseInsertRelationBuilder<TRootEntity, TRootEntity>> where TRelationEntity : class, new() where TRootEntity : class, new() Type Parameters Name Description TRelationEntity The type of the entity which will be inserted with. TRootEntity The root type of the entity. Methods | Improve this Doc View Source AndWith<TToEntity>(Expression<Func<TRelationEntity, TToEntity>>) Allows to configure the inserted relations with the current insert. Declaration IInsertRelationBuilder<TToEntity, TRootEntity> AndWith<TToEntity>(Expression<Func<TRelationEntity, TToEntity>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRelationEntity, TToEntity>> propertySelector A lambda expression representing the navigation property which should get inserted with the root entity during insertion. Returns Type Description IInsertRelationBuilder <TToEntity, TRootEntity> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the inserted entity. | Improve this Doc View Source AndWith<TToEntity>(Expression<Func<TRelationEntity, IList<TToEntity>>>) Allows to configure the inserted relations with the current insert. Declaration IInsertRelationBuilder<TToEntity, TRootEntity> AndWith<TToEntity>(Expression<Func<TRelationEntity, IList<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRelationEntity, IList <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get inserted with the root entity during insertion. Returns Type Description IInsertRelationBuilder <TToEntity, TRootEntity> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the inserted entity. | Improve this Doc View Source AndWith<TToEntity>(Expression<Func<TRelationEntity, List<TToEntity>>>) Allows to configure the inserted relations with the current insert. Declaration IInsertRelationBuilder<TToEntity, TRootEntity> AndWith<TToEntity>(Expression<Func<TRelationEntity, List<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRelationEntity, List <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get inserted with the root entity during insertion. Returns Type Description IInsertRelationBuilder <TToEntity, TRootEntity> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the inserted entity."
  },
  "api/Venflow.Commands.IPreCommandBuilder-2.html": {
    "href": "api/Venflow.Commands.IPreCommandBuilder-2.html",
    "title": "Interface IPreCommandBuilder<TEntity, TReturn> | Venflow Documentation",
    "keywords": "Interface IPreCommandBuilder<TEntity, TReturn> Represents a pre-command builder to configure the query. Inherited Members IQueryCommandBuilder<TEntity, TReturn>.TrackChanges(Boolean) IQueryCommandBuilder<TEntity, TReturn>.QueryAsync(CancellationToken) ISpecficVenflowCommandBuilder<IQueryCommand<TEntity, TReturn>, IBaseQueryRelationBuilder<TEntity, TEntity, TReturn>>.Build() ISpecficVenflowCommandBuilder<IQueryCommand<TEntity, TReturn>, IBaseQueryRelationBuilder<TEntity, TEntity, TReturn>>.Log(Boolean) ISpecficVenflowCommandBuilder<IQueryCommand<TEntity, TReturn>, IBaseQueryRelationBuilder<TEntity, TEntity, TReturn>>.LogTo(LoggerCallback) ISpecficVenflowCommandBuilder<IQueryCommand<TEntity, TReturn>, IBaseQueryRelationBuilder<TEntity, TEntity, TReturn>>.LogTo(LoggerCallback[]) Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface IPreCommandBuilder<TEntity, TReturn> : IQueryCommandBuilder<TEntity, TReturn>, ISpecficVenflowCommandBuilder<IQueryCommand<TEntity, TReturn>, IBaseQueryRelationBuilder<TEntity, TEntity, TReturn>> where TEntity : class, new() where TReturn : class, new() Type Parameters Name Description TEntity The type of the entity which will be queried. TReturn The return type of the query. Methods | Improve this Doc View Source AddFormatter() Defines if >< should be replaced by automatically generated joins in your SQL. Declaration IBaseQueryRelationBuilder<TEntity, TEntity, TReturn> AddFormatter() Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, TReturn> An object that can be used to further configure the operation."
  },
  "api/Venflow.Commands.IQueryCommand-2.html": {
    "href": "api/Venflow.Commands.IQueryCommand-2.html",
    "title": "Interface IQueryCommand<TEntity, TReturn> | Venflow Documentation",
    "keywords": "Interface IQueryCommand<TEntity, TReturn> Represents a command which performs queries and materialize the results to entities. Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface IQueryCommand<TEntity, TReturn> : IVenflowCommand<TEntity>, IAsyncDisposable where TEntity : class, new() where TReturn : class, new() Type Parameters Name Description TEntity The type of the entity which represents the result of the query. TReturn The return type of the query. Methods | Improve this Doc View Source PrepareAsync(CancellationToken) Asynchronously prepares the current SQL command on the database. Declaration Task<IQueryCommand<TEntity, TReturn>> PrepareAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description Task < IQueryCommand <TEntity, TReturn>> | Improve this Doc View Source QueryAsync(CancellationToken) Asynchronously performs queries and materializes the result. Declaration Task<TReturn> QueryAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description Task <TReturn> A task representing the asynchronous operation, with the materialized result of the query; null otherwise. | Improve this Doc View Source UnprepareAsync(CancellationToken) Asynchronously un-prepares the current SQL command on the database. Declaration Task<IQueryCommand<TEntity, TReturn>> UnprepareAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description Task < IQueryCommand <TEntity, TReturn>>"
  },
  "api/Venflow.Commands.IQueryCommandBuilder-2.html": {
    "href": "api/Venflow.Commands.IQueryCommandBuilder-2.html",
    "title": "Interface IQueryCommandBuilder<TEntity, TReturn> | Venflow Documentation",
    "keywords": "Interface IQueryCommandBuilder<TEntity, TReturn> Represents a command builder to configure the query. Inherited Members ISpecficVenflowCommandBuilder<IQueryCommand<TEntity, TReturn>, IBaseQueryRelationBuilder<TEntity, TEntity, TReturn>>.Build() ISpecficVenflowCommandBuilder<IQueryCommand<TEntity, TReturn>, IBaseQueryRelationBuilder<TEntity, TEntity, TReturn>>.Log(Boolean) ISpecficVenflowCommandBuilder<IQueryCommand<TEntity, TReturn>, IBaseQueryRelationBuilder<TEntity, TEntity, TReturn>>.LogTo(LoggerCallback) ISpecficVenflowCommandBuilder<IQueryCommand<TEntity, TReturn>, IBaseQueryRelationBuilder<TEntity, TEntity, TReturn>>.LogTo(LoggerCallback[]) Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface IQueryCommandBuilder<TEntity, TReturn> : ISpecficVenflowCommandBuilder<IQueryCommand<TEntity, TReturn>, IBaseQueryRelationBuilder<TEntity, TEntity, TReturn>> where TEntity : class, new() where TReturn : class, new() Type Parameters Name Description TEntity The type of the entity which will be queried. TReturn The return type of the query. Methods | Improve this Doc View Source QueryAsync(CancellationToken) Asynchronously performs queries and materializes the result. Declaration Task<TReturn> QueryAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description Task <TReturn> A task representing the asynchronous operation, with the materialized result of the query; null otherwise. | Improve this Doc View Source TrackChanges(Boolean) Determines whether or not to return change tracked entities from the query. Declaration IBaseQueryRelationBuilder<TEntity, TEntity, TReturn> TrackChanges(bool trackChanges = true) Parameters Type Name Description Boolean trackChanges Determines if change tracking should be applied. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, TReturn> An object that can be used to further configure the operation."
  },
  "api/Venflow.Commands.IQueryRelationBuilder-3.html": {
    "href": "api/Venflow.Commands.IQueryRelationBuilder-3.html",
    "title": "Interface IQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn> | Venflow Documentation",
    "keywords": "Interface IQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn> Represents a query relation builder to configure the query. Inherited Members IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn>.JoinWith<TToEntity>(Expression<Func<TRootEntity, TToEntity>>, JoinBehaviour) IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn>.JoinWith<TToEntity>(Expression<Func<TRootEntity, IList<TToEntity>>>, JoinBehaviour) IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn>.JoinWith<TToEntity>(Expression<Func<TRootEntity, List<TToEntity>>>, JoinBehaviour) IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn>.LeftJoinWith<TToEntity>(Expression<Func<TRootEntity, TToEntity>>) IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn>.LeftJoinWith<TToEntity>(Expression<Func<TRootEntity, IList<TToEntity>>>) IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn>.LeftJoinWith<TToEntity>(Expression<Func<TRootEntity, List<TToEntity>>>) IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn>.RightJoinWith<TToEntity>(Expression<Func<TRootEntity, TToEntity>>) IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn>.RightJoinWith<TToEntity>(Expression<Func<TRootEntity, IList<TToEntity>>>) IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn>.RightJoinWith<TToEntity>(Expression<Func<TRootEntity, List<TToEntity>>>) IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn>.FullJoinWith<TToEntity>(Expression<Func<TRootEntity, TToEntity>>) IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn>.FullJoinWith<TToEntity>(Expression<Func<TRootEntity, IList<TToEntity>>>) IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn>.FullJoinWith<TToEntity>(Expression<Func<TRootEntity, List<TToEntity>>>) IPreCommandBuilder<TRootEntity, TReturn>.AddFormatter() IQueryCommandBuilder<TRootEntity, TReturn>.TrackChanges(Boolean) IQueryCommandBuilder<TRootEntity, TReturn>.QueryAsync(CancellationToken) ISpecficVenflowCommandBuilder<IQueryCommand<TRootEntity, TReturn>, IBaseQueryRelationBuilder<TRootEntity, TRootEntity, TReturn>>.Build() ISpecficVenflowCommandBuilder<IQueryCommand<TRootEntity, TReturn>, IBaseQueryRelationBuilder<TRootEntity, TRootEntity, TReturn>>.Log(Boolean) ISpecficVenflowCommandBuilder<IQueryCommand<TRootEntity, TReturn>, IBaseQueryRelationBuilder<TRootEntity, TRootEntity, TReturn>>.LogTo(LoggerCallback) ISpecficVenflowCommandBuilder<IQueryCommand<TRootEntity, TReturn>, IBaseQueryRelationBuilder<TRootEntity, TRootEntity, TReturn>>.LogTo(LoggerCallback[]) Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface IQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn> : IBaseQueryRelationBuilder<TRelationEntity, TRootEntity, TReturn>, IPreCommandBuilder<TRootEntity, TReturn>, IQueryCommandBuilder<TRootEntity, TReturn>, ISpecficVenflowCommandBuilder<IQueryCommand<TRootEntity, TReturn>, IBaseQueryRelationBuilder<TRootEntity, TRootEntity, TReturn>> where TRelationEntity : class, new() where TRootEntity : class, new() where TReturn : class, new() Type Parameters Name Description TRelationEntity The type of the entity which will be joined with. TRootEntity The root type of the entity. TReturn The return type of the query. Methods | Improve this Doc View Source ThenFullWith<TToEntity>(Expression<Func<TRelationEntity, TToEntity>>) Allows to configure materialized full joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> ThenFullWith<TToEntity>(Expression<Func<TRelationEntity, TToEntity>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRelationEntity, TToEntity>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source ThenFullWith<TToEntity>(Expression<Func<TRelationEntity, IList<TToEntity>>>) Allows to configure materialized full joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> ThenFullWith<TToEntity>(Expression<Func<TRelationEntity, IList<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRelationEntity, IList <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source ThenFullWith<TToEntity>(Expression<Func<TRelationEntity, List<TToEntity>>>) Allows to configure materialized full joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> ThenFullWith<TToEntity>(Expression<Func<TRelationEntity, List<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRelationEntity, List <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source ThenLeftWith<TToEntity>(Expression<Func<TRelationEntity, TToEntity>>) Allows to configure materialized left joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> ThenLeftWith<TToEntity>(Expression<Func<TRelationEntity, TToEntity>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRelationEntity, TToEntity>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source ThenLeftWith<TToEntity>(Expression<Func<TRelationEntity, IList<TToEntity>>>) Allows to configure materialized left joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> ThenLeftWith<TToEntity>(Expression<Func<TRelationEntity, IList<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRelationEntity, IList <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source ThenLeftWith<TToEntity>(Expression<Func<TRelationEntity, List<TToEntity>>>) Allows to configure materialized left joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> ThenLeftWith<TToEntity>(Expression<Func<TRelationEntity, List<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRelationEntity, List <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source ThenRightWith<TToEntity>(Expression<Func<TRelationEntity, TToEntity>>) Allows to configure materialized right joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> ThenRightWith<TToEntity>(Expression<Func<TRelationEntity, TToEntity>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRelationEntity, TToEntity>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source ThenRightWith<TToEntity>(Expression<Func<TRelationEntity, IList<TToEntity>>>) Allows to configure materialized right joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> ThenRightWith<TToEntity>(Expression<Func<TRelationEntity, IList<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRelationEntity, IList <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source ThenRightWith<TToEntity>(Expression<Func<TRelationEntity, List<TToEntity>>>) Allows to configure materialized right joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> ThenRightWith<TToEntity>(Expression<Func<TRelationEntity, List<TToEntity>>> propertySelector) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRelationEntity, List <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. Remarks You are not forced to use these methods! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to use these methods. | Improve this Doc View Source ThenWith<TToEntity>(Expression<Func<TRelationEntity, TToEntity>>, JoinBehaviour) Allows to configure materialized joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> ThenWith<TToEntity>(Expression<Func<TRelationEntity, TToEntity>> propertySelector, JoinBehaviour joinBehaviour = JoinBehaviour.InnerJoin) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRelationEntity, TToEntity>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. JoinBehaviour joinBehaviour Configures the type of this join. You are not forced to use this parameter! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to define it. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. | Improve this Doc View Source ThenWith<TToEntity>(Expression<Func<TRelationEntity, IList<TToEntity>>>, JoinBehaviour) Allows to configure materialized joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> ThenWith<TToEntity>(Expression<Func<TRelationEntity, IList<TToEntity>>> propertySelector, JoinBehaviour joinBehaviour = JoinBehaviour.InnerJoin) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRelationEntity, IList <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. JoinBehaviour joinBehaviour Configures the type of this join. You are not forced to use this parameter! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to define it. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity. | Improve this Doc View Source ThenWith<TToEntity>(Expression<Func<TRelationEntity, List<TToEntity>>>, JoinBehaviour) Allows to configure materialized joins for the current query. Declaration IQueryRelationBuilder<TToEntity, TRootEntity, TReturn> ThenWith<TToEntity>(Expression<Func<TRelationEntity, List<TToEntity>>> propertySelector, JoinBehaviour joinBehaviour = JoinBehaviour.InnerJoin) where TToEntity : class, new() Parameters Type Name Description Expression < Func <TRelationEntity, List <TToEntity>>> propertySelector A lambda expression representing the navigation property which should get joined on doing materialization. JoinBehaviour joinBehaviour Configures the type of this join. You are not forced to use this parameter! It is just a more explicit way of defining your joins. Additionally Venflow will perform more validation in the background, if you choose to define it. Returns Type Description IQueryRelationBuilder <TToEntity, TRootEntity, TReturn> An object that can be used to further configure the operation. Type Parameters Name Description TToEntity The type of the joined entity."
  },
  "api/Venflow.Commands.ISpecficVenflowCommandBuilder-2.html": {
    "href": "api/Venflow.Commands.ISpecficVenflowCommandBuilder-2.html",
    "title": "Interface ISpecficVenflowCommandBuilder<TCommand, TLogResult> | Venflow Documentation",
    "keywords": "Interface ISpecficVenflowCommandBuilder<TCommand, TLogResult> Represents a generic command builder for all CRUD operations to finalize the configuration. Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface ISpecficVenflowCommandBuilder<out TCommand, out TLogResult> where TCommand : class where TLogResult : class Type Parameters Name Description TCommand The type of the command which is being configured. TLogResult The type of the command which is being configured after configuring the loggers. Methods | Improve this Doc View Source Build() Finalizes the ongoing configuration process and builds the command. Declaration TCommand Build() Returns Type Description TCommand The built command. | Improve this Doc View Source Log(Boolean) Determines whether or not to log the command to the provided loggers. Declaration TLogResult Log(bool shouldLog = true) Parameters Type Name Description Boolean shouldLog Determines if this command should be logged. This is helpful, if you configured the default logging behavior to be true . Returns Type Description TLogResult An object that can be used to further configure the operation. Remarks You can configure the loggers in the Configure(DatabaseOptionsBuilder) method with the methods. | Improve this Doc View Source LogTo(LoggerCallback) Logs the command to the provided logger . Declaration TLogResult LogTo(LoggerCallback logger) Parameters Type Name Description LoggerCallback logger The logger which is being used for this command. Returns Type Description TLogResult An object that can be used to further configure the operation. Remarks Be aware, that once you configure a logger on a command, the global configured loggers won't be executed for this command. | Improve this Doc View Source LogTo(LoggerCallback[]) Logs the command to the provided loggers . Declaration TLogResult LogTo(params LoggerCallback[] loggers) Parameters Type Name Description LoggerCallback [] loggers The loggers which are being used for this command. Returns Type Description TLogResult An object that can be used to further configure the operation. Remarks Be aware, that once you configure one or more loggers on a command, the global configured loggers won't be executed for this command."
  },
  "api/Venflow.Commands.IUpdateCommand-1.html": {
    "href": "api/Venflow.Commands.IUpdateCommand-1.html",
    "title": "Interface IUpdateCommand<TEntity> | Venflow Documentation",
    "keywords": "Interface IUpdateCommand<TEntity> Represents a command which performs updates of entities. Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface IUpdateCommand<TEntity> : IVenflowCommand<TEntity>, IAsyncDisposable where TEntity : class, new() Type Parameters Name Description TEntity The type of the entity which will be updated. Methods | Improve this Doc View Source UpdateAsync(TEntity, CancellationToken) Asynchronously updates a single entity. Declaration ValueTask UpdateAsync(TEntity entity, CancellationToken cancellationToken = null) Parameters Type Name Description TEntity entity The change tracked entity instance which should be updated. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask A task representing the asynchronous operation. | Improve this Doc View Source UpdateAsync(IEnumerable<TEntity>, CancellationToken) Asynchronously updates a set of entities. Declaration ValueTask UpdateAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable <TEntity> entities The change tracked entity instances which should be updated. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask A task representing the asynchronous operation. | Improve this Doc View Source UpdateAsync(IList<TEntity>, CancellationToken) Asynchronously updates a set of entities. Declaration ValueTask UpdateAsync(IList<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IList <TEntity> entities The change tracked entity instances which should be updated. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask A task representing the asynchronous operation."
  },
  "api/Venflow.Commands.IUpdateCommandBuilder-1.html": {
    "href": "api/Venflow.Commands.IUpdateCommandBuilder-1.html",
    "title": "Interface IUpdateCommandBuilder<TEntity> | Venflow Documentation",
    "keywords": "Interface IUpdateCommandBuilder<TEntity> Represents a command builder to configure the update. Inherited Members ISpecficVenflowCommandBuilder<IUpdateCommand<TEntity>, IUpdateCommandBuilder<TEntity>>.Build() ISpecficVenflowCommandBuilder<IUpdateCommand<TEntity>, IUpdateCommandBuilder<TEntity>>.Log(Boolean) ISpecficVenflowCommandBuilder<IUpdateCommand<TEntity>, IUpdateCommandBuilder<TEntity>>.LogTo(LoggerCallback) ISpecficVenflowCommandBuilder<IUpdateCommand<TEntity>, IUpdateCommandBuilder<TEntity>>.LogTo(LoggerCallback[]) Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface IUpdateCommandBuilder<TEntity> : ISpecficVenflowCommandBuilder<IUpdateCommand<TEntity>, IUpdateCommandBuilder<TEntity>> where TEntity : class, new() Type Parameters Name Description TEntity The type of the entity which will be updated. Methods | Improve this Doc View Source UpdateAsync(TEntity, CancellationToken) Asynchronously updates a single entity. Declaration ValueTask UpdateAsync(TEntity entity, CancellationToken cancellationToken = null) Parameters Type Name Description TEntity entity The change tracked entity instance which should be updated. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask A task representing the asynchronous operation. | Improve this Doc View Source UpdateAsync(TEntity[], CancellationToken) Asynchronously updates a set of entities. Declaration ValueTask UpdateAsync(TEntity[] entities, CancellationToken cancellationToken = null) Parameters Type Name Description TEntity[] entities The change tracked entity instances which should be updated. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask A task representing the asynchronous operation. | Improve this Doc View Source UpdateAsync(IEnumerable<TEntity>, CancellationToken) Asynchronously updates a set of entities. Declaration ValueTask UpdateAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable <TEntity> entities The change tracked entity instances which should be updated. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask A task representing the asynchronous operation. | Improve this Doc View Source UpdateAsync(IList<TEntity>, CancellationToken) Asynchronously updates a set of entities. Declaration ValueTask UpdateAsync(IList<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IList <TEntity> entities The change tracked entity instances which should be updated. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask A task representing the asynchronous operation. | Improve this Doc View Source UpdateAsync(List<TEntity>, CancellationToken) Asynchronously updates a set of entities. Declaration ValueTask UpdateAsync(List<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description List <TEntity> entities The change tracked entity instances which should be updated. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description ValueTask A task representing the asynchronous operation."
  },
  "api/Venflow.Commands.IVenflowCommand-1.html": {
    "href": "api/Venflow.Commands.IVenflowCommand-1.html",
    "title": "Interface IVenflowCommand<TEntity> | Venflow Documentation",
    "keywords": "Interface IVenflowCommand<TEntity> The base command for all other CRUD commands. Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface IVenflowCommand<TEntity> : IAsyncDisposable where TEntity : class, new() Type Parameters Name Description TEntity The type of the entity which is being used in the current operation."
  },
  "api/Venflow.Commands.IVenflowCommandBuilder-1.html": {
    "href": "api/Venflow.Commands.IVenflowCommandBuilder-1.html",
    "title": "Interface IVenflowCommandBuilder<TEntity> | Venflow Documentation",
    "keywords": "Interface IVenflowCommandBuilder<TEntity> Represents a generic command builder to create any CRUD command. Namespace : Venflow.Commands Assembly : Venflow.dll Syntax public interface IVenflowCommandBuilder<TEntity> where TEntity : class, new() Type Parameters Name Description TEntity The type of the entity which will be used for the command. Methods | Improve this Doc View Source Delete() Creates a new delete command builder. Declaration IDeleteCommandBuilder<TEntity> Delete() Returns Type Description IDeleteCommandBuilder <TEntity> A Fluent API Builder for a delete command. | Improve this Doc View Source Insert() Creates a new insert command builder. Declaration IBaseInsertRelationBuilder<TEntity, TEntity> Insert() Returns Type Description IBaseInsertRelationBuilder <TEntity, TEntity> A Fluent API Builder for a insert command. | Improve this Doc View Source QueryBatch(String) Creates a new query command builder, which expects a set of primary rows to be returned. This API does not support string interpolation! If you need to pass parameters with the query, either use QuerySingle(String, NpgsqlParameter[]) or QueryInterpolatedSingle(FormattableString) . Declaration IBaseQueryRelationBuilder<TEntity, TEntity, List<TEntity>> QueryBatch(string sql) Parameters Type Name Description String sql A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, List <TEntity>> A Fluent API Builder for a query command. | Improve this Doc View Source QueryBatch(String, NpgsqlParameter[]) Creates a new query command builder, which expects a set of primary rows to be returned. This API does not support string interpolation! If you want to pass interpolated SQL use QueryInterpolatedSingle(FormattableString) . Declaration IBaseQueryRelationBuilder<TEntity, TEntity, List<TEntity>> QueryBatch(string sql, params NpgsqlParameter[] parameters) Parameters Type Name Description String sql A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. NpgsqlParameter [] parameters A set of which contain parameters for the sql command. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, List <TEntity>> A Fluent API Builder for a query command. | Improve this Doc View Source QueryInterpolatedBatch(FormattableString) Creates a new query command builder, which expects a set of primary rows to be returned. This API does support string interpolation! . Declaration IBaseQueryRelationBuilder<TEntity, TEntity, List<TEntity>> QueryInterpolatedBatch(FormattableString sql) Parameters Type Name Description FormattableString sql A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. You should only add parameters trough string interpolation. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, List <TEntity>> A Fluent API Builder for a query command. | Improve this Doc View Source QueryInterpolatedSingle(FormattableString) Creates a new query command builder, which expects a single returned primary row. This API does support string interpolation! . Declaration IBaseQueryRelationBuilder<TEntity, TEntity, TEntity> QueryInterpolatedSingle(FormattableString sql) Parameters Type Name Description FormattableString sql A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. You should only add parameters trough string interpolation. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, TEntity> A Fluent API Builder for a query command. | Improve this Doc View Source QuerySingle(String) Creates a query command with a single result. This API does not support string interpolation! If you need to pass parameters with the query, either use QuerySingle(String, NpgsqlParameter[]) or QueryInterpolatedSingle(FormattableString) . Declaration IBaseQueryRelationBuilder<TEntity, TEntity, TEntity> QuerySingle(string sql) Parameters Type Name Description String sql Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, TEntity> An object that can be used to further configure the operation. | Improve this Doc View Source QuerySingle(String, NpgsqlParameter[]) Creates a new query command builder, which expects a single returned primary row. This API does not support string interpolation! If you want to pass interpolated SQL use QueryInterpolatedSingle(FormattableString) . Declaration IBaseQueryRelationBuilder<TEntity, TEntity, TEntity> QuerySingle(string sql, params NpgsqlParameter[] parameters) Parameters Type Name Description String sql A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. NpgsqlParameter [] parameters A set of which contain parameters for the sql command. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, TEntity> A Fluent API Builder for a query command. | Improve this Doc View Source Update() Creates a new update command builder. Declaration IUpdateCommandBuilder<TEntity> Update() Returns Type Description IUpdateCommandBuilder <TEntity> A Fluent API Builder for a update command."
  },
  "api/Venflow.Database.html": {
    "href": "api/Venflow.Database.html",
    "title": "Class Database | Venflow Documentation",
    "keywords": "Class Database A Database instance represents a session with the database and can be used to perform CRUD operations with your tables and entities. Inheritance Object Database Implements IDisposable Namespace : Venflow Assembly : Venflow.dll Syntax public abstract class Database : IAsyncDisposable, IDisposable Remarks Typically you create a class that derives from Database and contains Table<TEntity> properties for each entity in the Database. All the Table<TEntity> properties must have a public setter, they are automatically initialized when the instance of the derived type is created. Constructors | Improve this Doc View Source Database(String) Initializes a new instance of the Database class using the specified connectionString . Declaration protected Database(string connectionString) Parameters Type Name Description String connectionString The connection string to your PostgreSQL Database. Methods | Improve this Doc View Source BeginTransactionAsync(CancellationToken) Asynchronously begins a new transaction. Declaration public Task<NpgsqlTransaction> BeginTransactionAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description Task < NpgsqlTransaction > A task that represents the asynchronous operation. The task result contains the newly created transaction. | Improve this Doc View Source BeginTransactionAsync(IsolationLevel, CancellationToken) Asynchronously begins a new transaction. Declaration public Task<NpgsqlTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken = null) Parameters Type Name Description IsolationLevel isolationLevel The isolation level under which the transaction should run. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation Returns Type Description Task < NpgsqlTransaction > A task that represents the asynchronous operation. The task result contains the newly created transaction. | Improve this Doc View Source Configure(DatabaseOptionsBuilder) Allows for further configuration of the Database . Declaration protected virtual void Configure(DatabaseOptionsBuilder optionsBuilder) Parameters Type Name Description DatabaseOptionsBuilder optionsBuilder A builder instance used to further configure the Database . | Improve this Doc View Source Custom<TEntity>() Allows for queries against an entity which isn't usually defined, this is usually an entity which hasn't got a table in your database. Declaration public TableBase<TEntity> Custom<TEntity>() where TEntity : class, new() Returns Type Description TableBase <TEntity> A TableBase<TEntity> instance from which queries can be executed. Type Parameters Name Description TEntity Remarks The TEntity should always be used with this Database instance, otherwise the model has to be generated multiple times. | Improve this Doc View Source Dispose() Releases the allocated resources for this context. Also closes the underlying connection, if open. Declaration public void Dispose() Remarks If you are in an asynchronous context you should consider using DisposeAsync() instead. | Improve this Doc View Source DisposeAsync() Releases the allocated resources for this context. Also closes the underlying connection, if open. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask A value task representing the asynchronous operation | Improve this Doc View Source ExecuteAsync(String, CancellationToken) Asynchronously executes a command against the current Database. As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Declaration public Task<int> ExecuteAsync(string sql, CancellationToken cancellationToken = null) Parameters Type Name Description String sql The SQL to execute. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description Task < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. Remarks This method represents a call. | Improve this Doc View Source ExecuteAsync(String, IList<NpgsqlParameter>, CancellationToken) Asynchronously executes a command against the current Database. As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Declaration public Task<int> ExecuteAsync(string sql, IList<NpgsqlParameter> parameters, CancellationToken cancellationToken = null) Parameters Type Name Description String sql The SQL to execute. IList < NpgsqlParameter > parameters The SQL Parameters which are being used for the current command. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description Task < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. Remarks This method represents a call. | Improve this Doc View Source ExecuteAsync(String, NpgsqlParameter[]) Asynchronously executes a command against the current Database. As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Declaration public Task<int> ExecuteAsync(string sql, params NpgsqlParameter[] parameters) Parameters Type Name Description String sql The SQL to execute. NpgsqlParameter [] parameters The SQL Parameters which are being used for the current command. Returns Type Description Task < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. Remarks This method represents a call. | Improve this Doc View Source ExecuteAsync<T>(String, CancellationToken) Asynchronously executes a command against the current Database. As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Declaration public Task<T> ExecuteAsync<T>(string sql, CancellationToken cancellationToken = null) where T : struct Parameters Type Name Description String sql The SQL to execute. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description Task <T> A task representing the asynchronous operation, with the value of the scalar command. Type Parameters Name Description T The type of the scalar result. Remarks This method represents a call. | Improve this Doc View Source ExecuteAsync<T>(String, IList<NpgsqlParameter>, CancellationToken) Asynchronously executes a command against the current Database. As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Declaration public Task<T> ExecuteAsync<T>(string sql, IList<NpgsqlParameter> parameters, CancellationToken cancellationToken = null) where T : struct Parameters Type Name Description String sql The SQL to execute. IList < NpgsqlParameter > parameters The SQL Parameters which are being used for the current command. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description Task <T> A task representing the asynchronous operation, with the value of the scalar command. Type Parameters Name Description T The type of the scalar result. Remarks This method represents a call. | Improve this Doc View Source ExecuteAsync<T>(String, NpgsqlParameter[]) Asynchronously executes a command against the current Database. As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Declaration public Task<T> ExecuteAsync<T>(string sql, params NpgsqlParameter[] parameters) where T : struct Parameters Type Name Description String sql The SQL to execute. NpgsqlParameter [] parameters The SQL Parameters which are being used for the current command. Returns Type Description Task <T> A task representing the asynchronous operation, with the value of the scalar command. Type Parameters Name Description T The type of the scalar result. Remarks This method represents a call. | Improve this Doc View Source ExecuteInterpolatedAsync(FormattableString, CancellationToken) Asynchronously executes a command against the current Database. This method does automatically parameterize queries from an interpolated string. Declaration public Task<int> ExecuteInterpolatedAsync(FormattableString sql, CancellationToken cancellationToken = null) Parameters Type Name Description FormattableString sql The interpolated SQL to execute. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description Task < Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. Remarks This method represents a call. | Improve this Doc View Source ExecuteInterpolatedAsync<T>(FormattableString, CancellationToken) Asynchronously executes a command against the current Database. This method does automatically parameterize queries from an interpolated string. Declaration public Task<T> ExecuteInterpolatedAsync<T>(FormattableString sql, CancellationToken cancellationToken = null) where T : struct Parameters Type Name Description FormattableString sql The interpolated SQL to execute. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description Task <T> A task representing the asynchronous operation, with the value of the scalar command. Type Parameters Name Description T The type of the scalar result. Remarks This method represents a call. | Improve this Doc View Source GetConnection() Gets or creates a new connections, if none got created yet. Declaration public NpgsqlConnection GetConnection() Returns Type Description NpgsqlConnection the . Implements IDisposable"
  },
  "api/Venflow.DatabaseOptionsBuilder.html": {
    "href": "api/Venflow.DatabaseOptionsBuilder.html",
    "title": "Class DatabaseOptionsBuilder | Venflow Documentation",
    "keywords": "Class DatabaseOptionsBuilder Provides an option builder to further configure a Database instance. Inheritance Object DatabaseOptionsBuilder Namespace : Venflow Assembly : Venflow.dll Syntax public class DatabaseOptionsBuilder : object Properties | Improve this Doc View Source DefaultLoggingBehavior Gets or sets the default LoggingBehavior on commands for this Database . The default is Always , if any loggers are defined. Declaration public LoggingBehavior DefaultLoggingBehavior { get; set; } Property Value Type Description LoggingBehavior Methods | Improve this Doc View Source LogTo(LoggerCallback) Adds a logger, which allows for logging of executed commands. Declaration public DatabaseOptionsBuilder LogTo(LoggerCallback loggerCallback) Parameters Type Name Description LoggerCallback loggerCallback A callback which is being used to log commands. Returns Type Description DatabaseOptionsBuilder An object that can be used to configure the current Database instance. Remarks This currently only includes the following API's: Also consider configuring the DefaultLoggingBehavior property. | Improve this Doc View Source UseConfigurations(Assembly) Adds the assembly to the EntityConfiguration<TEntity> lookup list. Declaration public DatabaseOptionsBuilder UseConfigurations(Assembly assembly) Parameters Type Name Description Assembly assembly The assembly which should be added to the lookup list. Returns Type Description DatabaseOptionsBuilder An object that can be used to configure the current Database instance. Remarks If you add a custom configuration location, the assembly of the database type will not be automatically included. | Improve this Doc View Source UseConfigurations(Assembly[]) Adds the assemblies to the EntityConfiguration<TEntity> lookup list. Declaration public DatabaseOptionsBuilder UseConfigurations(params Assembly[] assemblies) Parameters Type Name Description Assembly [] assemblies The assemblies which should be added to the lookup list. Returns Type Description DatabaseOptionsBuilder An object that can be used to configure the current Database instance. Remarks If you add a custom configuration location, the assembly of the database type will not be automatically included. | Improve this Doc View Source UseConfigurations<T>() Adds the assembly of the type T to the EntityConfiguration<TEntity> lookup list. Declaration public DatabaseOptionsBuilder UseConfigurations<T>() Returns Type Description DatabaseOptionsBuilder An object that can be used to configure the current Database instance. Type Parameters Name Description T The type of which the assembly should be added to the lookup list. Remarks If you add a custom configuration location, the assembly of the database type will not be automatically included."
  },
  "api/Venflow.Enums.CommandType.html": {
    "href": "api/Venflow.Enums.CommandType.html",
    "title": "Enum CommandType | Venflow Documentation",
    "keywords": "Enum CommandType Namespace : Venflow.Enums Assembly : Venflow.dll Syntax public enum CommandType : short Fields Name Description Delete DeleteBatch DeleteSingle Insert InsertBatch InsertSingle Query QueryBatch QuerySingle Update UpdateBatch UpdateSingle"
  },
  "api/Venflow.Enums.ForeignTruncateOptions.html": {
    "href": "api/Venflow.Enums.ForeignTruncateOptions.html",
    "title": "Enum ForeignTruncateOptions | Venflow Documentation",
    "keywords": "Enum ForeignTruncateOptions Represents the truncate option for foreign keys. Namespace : Venflow.Enums Assembly : Venflow.dll Syntax public enum ForeignTruncateOptions : byte Fields Name Description Cascade Automatically truncate all tables that have foreign-key references to any of the named tables, or to any tables added to the group due to CASCADE. None Does nothing. Restrict Refuse to truncate if any of the tables have foreign-key references from tables that are not listed in the command. This is the default."
  },
  "api/Venflow.Enums.html": {
    "href": "api/Venflow.Enums.html",
    "title": "Namespace Venflow.Enums | Venflow Documentation",
    "keywords": "Namespace Venflow.Enums Enums CommandType ForeignTruncateOptions Represents the truncate option for foreign keys. IdentityTruncateOptions Represents the identity truncate option for foreign keys. JoinBehaviour Specifies the behavior for a specific join between two tables. LoggingBehavior Specifies the logging behavior for Venflow commands."
  },
  "api/Venflow.Enums.IdentityTruncateOptions.html": {
    "href": "api/Venflow.Enums.IdentityTruncateOptions.html",
    "title": "Enum IdentityTruncateOptions | Venflow Documentation",
    "keywords": "Enum IdentityTruncateOptions Represents the identity truncate option for foreign keys. Namespace : Venflow.Enums Assembly : Venflow.dll Syntax public enum IdentityTruncateOptions : byte Fields Name Description Continue Do not change the values of sequences. This is the default. None Does nothing. Restart Automatically restart sequences owned by columns of the truncated table(s)."
  },
  "api/Venflow.Enums.JoinBehaviour.html": {
    "href": "api/Venflow.Enums.JoinBehaviour.html",
    "title": "Enum JoinBehaviour | Venflow Documentation",
    "keywords": "Enum JoinBehaviour Specifies the behavior for a specific join between two tables. Namespace : Venflow.Enums Assembly : Venflow.dll Syntax public enum JoinBehaviour : byte Fields Name Description FullJoin Returns all records when there is a match in either left or right table InnerJoin Returns records that have matching values in both tables LeftJoin Returns all records from the left table, and the matched records from the right table RightJoin Returns all records from the right table, and the matched records from the left table"
  },
  "api/Venflow.Enums.LoggingBehavior.html": {
    "href": "api/Venflow.Enums.LoggingBehavior.html",
    "title": "Enum LoggingBehavior | Venflow Documentation",
    "keywords": "Enum LoggingBehavior Specifies the logging behavior for Venflow commands. Namespace : Venflow.Enums Assembly : Venflow.dll Syntax public enum LoggingBehavior : byte Fields Name Description Always Logs all commands. Never Never logs commands."
  },
  "api/Venflow.FormattableSqlStringBuilder.html": {
    "href": "api/Venflow.FormattableSqlStringBuilder.html",
    "title": "Class FormattableSqlStringBuilder | Venflow Documentation",
    "keywords": "Class FormattableSqlStringBuilder Allows for a safe string interpolated SQL concatenation. Inheritance Object FormattableSqlStringBuilder Namespace : Venflow Assembly : Venflow.dll Syntax public class FormattableSqlStringBuilder : object Constructors | Improve this Doc View Source FormattableSqlStringBuilder() Initializes a new instance of the FormattableSqlStringBuilder class. Declaration public FormattableSqlStringBuilder() Methods | Improve this Doc View Source Append(String) Appends a copy of the specified SQL to this instance. Declaration public void Append(string sql) Parameters Type Name Description String sql The SQL to append. Remarks This method IS NOT string interpolation safe , if you want to use string interpolated SQL use the AppendInterpolated(FormattableString) method. | Improve this Doc View Source AppendInterpolated(FormattableString) Appends a copy of the specified SQL to this instance. Declaration public void AppendInterpolated(FormattableString sql) Parameters Type Name Description FormattableString sql The SQL to append. Remarks This method is string interpolation safe. | Improve this Doc View Source AppendInterpolatedLine(FormattableString) Appends a copy of the specified SQL followed by the default line terminator to the end of the current FormattableSqlStringBuilder object. Declaration public void AppendInterpolatedLine(FormattableString sql) Parameters Type Name Description FormattableString sql The SQL to append. Remarks This method is string interpolation safe. | Improve this Doc View Source AppendLine(String) Appends a copy of the specified SQL followed by the default line terminator to the end of the current FormattableSqlStringBuilder object. Declaration public void AppendLine(string sql) Parameters Type Name Description String sql The SQL to append. Remarks This method IS NOT string interpolation safe , if you want to use string interpolated SQL use the AppendInterpolatedLine(FormattableString) method."
  },
  "api/Venflow.html": {
    "href": "api/Venflow.html",
    "title": "Namespace Venflow | Venflow Documentation",
    "keywords": "Namespace Venflow Classes Database A Database instance represents a session with the database and can be used to perform CRUD operations with your tables and entities. DatabaseOptionsBuilder Provides an option builder to further configure a Database instance. FormattableSqlStringBuilder Allows for a safe string interpolated SQL concatenation. InvalidEntityRelationException Represents errors that occur during the relation entity generation. NpgsqlCommandExtensions Provides a set of useful extension methods for the class. ParameterTypeHandler A class which contains methods to configure the used type handlers while parsing Interpolated arguments. Table<TEntity> A Table<TEntity> is used to perform CRUD operations against the table represented by TEntity . TableBase<TEntity> A TableBase<TEntity> is used to perform query operations of all sorts. TypeArgumentException Represents an error which occur when an invalid type argument gets passed to a generic method. VenflowConfiguration Contains methods to globally set the configuration of Venflow. Structs Key<T, TKey> This is used to create strongly-typed ids. Interfaces IKey Do not use this interface, if you are not absolutely sure what it does. IKey<T, TKey> This interface should be implemented by structs , to create strongly-typed ids. IParameterTypeHandler A parameter type handler which can be used with the method. Delegates LoggerCallback"
  },
  "api/Venflow.IKey.html": {
    "href": "api/Venflow.IKey.html",
    "title": "Interface IKey | Venflow Documentation",
    "keywords": "Interface IKey Do not use this interface, if you are not absolutely sure what it does. Namespace : Venflow Assembly : Venflow.dll Syntax public interface IKey"
  },
  "api/Venflow.IKey-2.html": {
    "href": "api/Venflow.IKey-2.html",
    "title": "Interface IKey<T, TKey> | Venflow Documentation",
    "keywords": "Interface IKey<T, TKey> This interface should be implemented by structs , to create strongly-typed ids. Namespace : Venflow Assembly : Venflow.dll Syntax public interface IKey<T, TKey> : IKey where TKey : struct Type Parameters Name Description T They type of entity the key sits in. TKey The type of the key. Remarks See Key<T, TKey> for a possible implementation. Properties | Improve this Doc View Source Value Declaration TKey Value { get; } Property Value Type Description TKey"
  },
  "api/Venflow.InvalidEntityRelationException.html": {
    "href": "api/Venflow.InvalidEntityRelationException.html",
    "title": "Class InvalidEntityRelationException | Venflow Documentation",
    "keywords": "Class InvalidEntityRelationException Represents errors that occur during the relation entity generation. Inheritance Object InvalidEntityRelationException Namespace : Venflow Assembly : Venflow.dll Syntax public class InvalidEntityRelationException : Exception Constructors | Improve this Doc View Source InvalidEntityRelationException() Initializes a new instance of the InvalidEntityRelationException class. Declaration public InvalidEntityRelationException() | Improve this Doc View Source InvalidEntityRelationException(Serialization.SerializationInfo, Serialization.StreamingContext) Initializes a new instance of the InvalidEntityRelationException class. Declaration protected InvalidEntityRelationException(Serialization.SerializationInfo info, Serialization.StreamingContext context) Parameters Type Name Description Serialization.SerializationInfo info The that holds the serialized object data about the exception being thrown. Serialization.StreamingContext context The that contains contextual information about the source or destination. | Improve this Doc View Source InvalidEntityRelationException(String) Initializes a new instance of the InvalidEntityRelationException class. Declaration public InvalidEntityRelationException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source InvalidEntityRelationException(String, Exception) Initializes a new instance of the InvalidEntityRelationException class. Declaration public InvalidEntityRelationException(string message, Exception inner) Parameters Type Name Description String message The message that describes the error. Exception inner The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/Venflow.IParameterTypeHandler.html": {
    "href": "api/Venflow.IParameterTypeHandler.html",
    "title": "Interface IParameterTypeHandler | Venflow Documentation",
    "keywords": "Interface IParameterTypeHandler A parameter type handler which can be used with the method. Namespace : Venflow Assembly : Venflow.dll Syntax public interface IParameterTypeHandler Methods | Improve this Doc View Source Handle(String, Object) Is used to convert the given value and name to an . Declaration NpgsqlParameter Handle(string name, object val) Parameters Type Name Description String name The name of the parameter. Object val The value of the parameter. Returns Type Description NpgsqlParameter The containing the name and the value."
  },
  "api/Venflow.Key-2.html": {
    "href": "api/Venflow.Key-2.html",
    "title": "Struct Key<T, TKey> | Venflow Documentation",
    "keywords": "Struct Key<T, TKey> This is used to create strongly-typed ids. Implements IKey <T, TKey> IKey IEquatable < Key <T, TKey>> Namespace : Venflow Assembly : Venflow.dll Syntax public struct Key<T, TKey> : IKey<T, TKey>, IKey, IEquatable<Key<T, TKey>> where TKey : struct, IEquatable<TKey> Type Parameters Name Description T They type of entity the key sits in. TKey The type of the key. Remarks You can also create more specific implementations of this type, by creating a struct implementing IKey<T, TKey> . Constructors | Improve this Doc View Source Key(TKey) Instantiates a new Key<T, TKey> instance withe the provided value. Declaration public Key(TKey value) Parameters Type Name Description TKey value The value which should represent the new Key<T, TKey> instance. Methods | Improve this Doc View Source Equals(Nullable<Object>) Declaration public override bool Equals(object? obj) Parameters Type Name Description Nullable < Object > obj Returns Type Description Boolean | Improve this Doc View Source Equals(Key<T, TKey>) Declaration public bool Equals(Key<T, TKey> other) Parameters Type Name Description Key <T, TKey> other Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(Key<T, TKey>, Key<T, TKey>) Declaration public static bool operator ==(in Key<T, TKey> a, in Key<T, TKey> b) Parameters Type Name Description Key <T, TKey> a Key <T, TKey> b Returns Type Description Boolean | Improve this Doc View Source Implicit(TKey to Key<T, TKey>) Declaration public static implicit operator Key<T, TKey>(in TKey value) Parameters Type Name Description TKey value Returns Type Description Key <T, TKey> | Improve this Doc View Source Implicit(Key<T, TKey> to TKey) Declaration public static implicit operator TKey(in Key<T, TKey> key) Parameters Type Name Description Key <T, TKey> key Returns Type Description TKey | Improve this Doc View Source Inequality(Key<T, TKey>, Key<T, TKey>) Declaration public static bool operator !=(in Key<T, TKey> a, in Key<T, TKey> b) Parameters Type Name Description Key <T, TKey> a Key <T, TKey> b Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IKey<T, TKey>.Value The underlying value representing the Key<T, TKey> . Declaration TKey IKey<T, TKey>.Value { get; set; } Returns Type Description TKey Implements IKey<T, TKey> IKey IEquatable<>"
  },
  "api/Venflow.LoggerCallback.html": {
    "href": "api/Venflow.LoggerCallback.html",
    "title": "Delegate LoggerCallback | Venflow Documentation",
    "keywords": "Delegate LoggerCallback Namespace : Venflow Assembly : Venflow.dll Syntax public delegate void LoggerCallback(NpgsqlCommand command, CommandType commandType, Exception? exception); Parameters Type Name Description NpgsqlCommand command CommandType commandType Nullable < Exception > exception"
  },
  "api/Venflow.Modeling.Definitions.Builder.html": {
    "href": "api/Venflow.Modeling.Definitions.Builder.html",
    "title": "Namespace Venflow.Modeling.Definitions.Builder | Venflow Documentation",
    "keywords": "Namespace Venflow.Modeling.Definitions.Builder Interfaces IForeignKeyRelationBuilder<TEntity, TRelation> This interface hosts relation methods for the foreign key configurations. ILeftRelationBuilder<TEntity> This interface hosts relation methods for the left side of a relation. IMultiRightRelationBuilder<TEntity, TRelation> Instances of this class are returned from methods inside the Table<TEntity> class when using the Fluid API and it is not designed to be directly constructed in your application code. INotRequiredMultiRightRelationBuilder<TEntity, TRelation> This interface hosts relation methods for the right side of a relation. INotRequiredSingleRightRelationBuilder<TEntity, TRelation> This interface hosts relation methods for the right side of a relation. IRequiredMultiRightRelationBuilder<TEntity, TRelation> This interface hosts relation methods for the right side of a relation. IRequiredSingleRightRelationBuilder<TEntity, TRelation> This interface hosts relation methods for the right side of a relation."
  },
  "api/Venflow.Modeling.Definitions.Builder.IForeignKeyRelationBuilder-2.html": {
    "href": "api/Venflow.Modeling.Definitions.Builder.IForeignKeyRelationBuilder-2.html",
    "title": "Interface IForeignKeyRelationBuilder<TEntity, TRelation> | Venflow Documentation",
    "keywords": "Interface IForeignKeyRelationBuilder<TEntity, TRelation> This interface hosts relation methods for the foreign key configurations. Namespace : Venflow.Modeling.Definitions.Builder Assembly : Venflow.dll Syntax public interface IForeignKeyRelationBuilder<TEntity, TRelation> where TEntity : class, new() where TRelation : class Type Parameters Name Description TEntity TRelation Methods | Improve this Doc View Source UsingForeignKey<TKey>(Expression<Func<TEntity, TKey>>) Configures the property to be used as the foreign key for this relationship. Declaration void UsingForeignKey<TKey>(Expression<Func<TEntity, TKey>> navigationProperty) Parameters Type Name Description Expression < Func <TEntity, TKey>> navigationProperty A lambda expression representing the foreign key property (post => post.BlogId). Type Parameters Name Description TKey The type of the foreign key. | Improve this Doc View Source UsingForeignKey<TKey>(Expression<Func<TRelation, TKey>>) Configures the property to be used as the foreign key for this relationship. Declaration void UsingForeignKey<TKey>(Expression<Func<TRelation, TKey>> navigationProperty) Parameters Type Name Description Expression < Func <TRelation, TKey>> navigationProperty A lambda expression representing the foreign key property (post => post.BlogId). Type Parameters Name Description TKey The type of the foreign key."
  },
  "api/Venflow.Modeling.Definitions.Builder.ILeftRelationBuilder-1.html": {
    "href": "api/Venflow.Modeling.Definitions.Builder.ILeftRelationBuilder-1.html",
    "title": "Interface ILeftRelationBuilder<TEntity> | Venflow Documentation",
    "keywords": "Interface ILeftRelationBuilder<TEntity> This interface hosts relation methods for the left side of a relation. Namespace : Venflow.Modeling.Definitions.Builder Assembly : Venflow.dll Syntax public interface ILeftRelationBuilder<TEntity> where TEntity : class, new() Type Parameters Name Description TEntity The entity type being configured. Methods | Improve this Doc View Source HasMany<TRelation>() Configures a relationship where this entity type has a collection that contains instances of the other type in the relationship. Note that calling this method will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified. After calling this method, you should chain a call to WithOne(Expression<Func<TRelation, TEntity>>) to fully configure the relationship. Calling just this method without the chained call will not produce a valid relationship. Declaration IRequiredSingleRightRelationBuilder<TEntity, TRelation> HasMany<TRelation>() where TRelation : class Returns Type Description IRequiredSingleRightRelationBuilder <TEntity, TRelation> An object that can be used to configure the relationship. Type Parameters Name Description TRelation The entity type that this relationship targets. | Improve this Doc View Source HasMany<TRelation>(Expression<Func<TEntity, IList<TRelation>>>) Configures a relationship where this entity type has a collection that contains instances of the other type in the relationship. Note that calling this method with no parameters will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified. After calling this method, you should chain a call to WithOne() to fully configure the relationship. Calling just this method without the chained call will not produce a valid relationship. Declaration INotRequiredSingleRightRelationBuilder<TEntity, TRelation> HasMany<TRelation>(Expression<Func<TEntity, IList<TRelation>>> navigationProperty) where TRelation : class Parameters Type Name Description Expression < Func <TEntity, IList <TRelation>>> navigationProperty Returns Type Description INotRequiredSingleRightRelationBuilder <TEntity, TRelation> An object that can be used to configure the relationship. Type Parameters Name Description TRelation The entity type that this relationship targets. | Improve this Doc View Source HasOne<TRelation>() Configures a relationship where this entity type has a reference that points to a single instance of the other type in the relationship. Note that calling this method will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified. After calling this method, you should chain a call to WithMany(Expression<Func<TRelation, IList<TEntity>>>) or WithOne(Expression<Func<TRelation, TEntity>>) to fully configure the relationship. Calling just this method without the chained call will not produce a valid relationship. Declaration IRequiredMultiRightRelationBuilder<TEntity, TRelation> HasOne<TRelation>() where TRelation : class Returns Type Description IRequiredMultiRightRelationBuilder <TEntity, TRelation> An object that can be used to configure the relationship. Type Parameters Name Description TRelation The entity type that this relationship targets. | Improve this Doc View Source HasOne<TRelation>(Expression<Func<TEntity, TRelation>>) Configures a relationship where this entity type has a reference that points to a single instance of the other type in the relationship. Note that calling this method with no parameters will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified. After calling this method, you should chain a call to WithMany() or WithOne() to fully configure the relationship. Calling just this method without the chained call will not produce a valid relationship. Declaration INotRequiredMultiRightRelationBuilder<TEntity, TRelation> HasOne<TRelation>(Expression<Func<TEntity, TRelation>> navigationProperty) where TRelation : class Parameters Type Name Description Expression < Func <TEntity, TRelation>> navigationProperty A lambda expression representing the reference navigation property on this entity type that represents the relationship (post => post.Blog). If no property is specified, the relationship will be configured without a navigation property on this end. Returns Type Description INotRequiredMultiRightRelationBuilder <TEntity, TRelation> An object that can be used to configure the relationship. Type Parameters Name Description TRelation The entity type that this relationship targets."
  },
  "api/Venflow.Modeling.Definitions.Builder.IMultiRightRelationBuilder-2.html": {
    "href": "api/Venflow.Modeling.Definitions.Builder.IMultiRightRelationBuilder-2.html",
    "title": "Interface IMultiRightRelationBuilder<TEntity, TRelation> | Venflow Documentation",
    "keywords": "Interface IMultiRightRelationBuilder<TEntity, TRelation> Instances of this class are returned from methods inside the Table<TEntity> class when using the Fluid API and it is not designed to be directly constructed in your application code. Namespace : Venflow.Modeling.Definitions.Builder Assembly : Venflow.dll Syntax public interface IMultiRightRelationBuilder<TEntity, TRelation> where TEntity : class, new() where TRelation : class Type Parameters Name Description TEntity TRelation The entity type that this relationship targets. Methods | Improve this Doc View Source WithMany(Expression<Func<TRelation, IList<TEntity>>>) Configures this as a one-to-many relationship. Note that calling this method with no parameters will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified. Declaration IForeignKeyRelationBuilder<TEntity, TRelation> WithMany(Expression<Func<TRelation, IList<TEntity>>> navigationProperty) Parameters Type Name Description Expression < Func <TRelation, IList <TEntity>>> navigationProperty A lambda expression representing the collection navigation property on the other end of this relationship (blog => blog.Posts). If no property is specified, the relationship will be configured without a navigation property on the other end of the relationship. Returns Type Description IForeignKeyRelationBuilder <TEntity, TRelation> An object that can be used to configure the relationship."
  },
  "api/Venflow.Modeling.Definitions.Builder.INotRequiredMultiRightRelationBuilder-2.html": {
    "href": "api/Venflow.Modeling.Definitions.Builder.INotRequiredMultiRightRelationBuilder-2.html",
    "title": "Interface INotRequiredMultiRightRelationBuilder<TEntity, TRelation> | Venflow Documentation",
    "keywords": "Interface INotRequiredMultiRightRelationBuilder<TEntity, TRelation> This interface hosts relation methods for the right side of a relation. Inherited Members IMultiRightRelationBuilder<TEntity, TRelation>.WithMany(Expression<Func<TRelation, IList<TEntity>>>) INotRequiredSingleRightRelationBuilder<TEntity, TRelation>.WithOne() IRequiredSingleRightRelationBuilder<TEntity, TRelation>.WithOne(Expression<Func<TRelation, TEntity>>) Namespace : Venflow.Modeling.Definitions.Builder Assembly : Venflow.dll Syntax public interface INotRequiredMultiRightRelationBuilder<TEntity, TRelation> : IMultiRightRelationBuilder<TEntity, TRelation>, INotRequiredSingleRightRelationBuilder<TEntity, TRelation>, IRequiredSingleRightRelationBuilder<TEntity, TRelation> where TEntity : class, new() where TRelation : class Type Parameters Name Description TEntity TRelation Methods | Improve this Doc View Source WithMany() Configures this as a one-to-many relationship. Note that calling this method will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified. Declaration IForeignKeyRelationBuilder<TEntity, TRelation> WithMany() Returns Type Description IForeignKeyRelationBuilder <TEntity, TRelation> An object that can be used to configure the relationship."
  },
  "api/Venflow.Modeling.Definitions.Builder.INotRequiredSingleRightRelationBuilder-2.html": {
    "href": "api/Venflow.Modeling.Definitions.Builder.INotRequiredSingleRightRelationBuilder-2.html",
    "title": "Interface INotRequiredSingleRightRelationBuilder<TEntity, TRelation> | Venflow Documentation",
    "keywords": "Interface INotRequiredSingleRightRelationBuilder<TEntity, TRelation> This interface hosts relation methods for the right side of a relation. Inherited Members IRequiredSingleRightRelationBuilder<TEntity, TRelation>.WithOne(Expression<Func<TRelation, TEntity>>) Namespace : Venflow.Modeling.Definitions.Builder Assembly : Venflow.dll Syntax public interface INotRequiredSingleRightRelationBuilder<TEntity, TRelation> : IRequiredSingleRightRelationBuilder<TEntity, TRelation> where TEntity : class, new() where TRelation : class Type Parameters Name Description TEntity TRelation Methods | Improve this Doc View Source WithOne() Configures this as a one-to-one relationship. Note that calling this method will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified. Declaration IForeignKeyRelationBuilder<TEntity, TRelation> WithOne() Returns Type Description IForeignKeyRelationBuilder <TEntity, TRelation> An object that can be used to configure the relationship."
  },
  "api/Venflow.Modeling.Definitions.Builder.IRequiredMultiRightRelationBuilder-2.html": {
    "href": "api/Venflow.Modeling.Definitions.Builder.IRequiredMultiRightRelationBuilder-2.html",
    "title": "Interface IRequiredMultiRightRelationBuilder<TEntity, TRelation> | Venflow Documentation",
    "keywords": "Interface IRequiredMultiRightRelationBuilder<TEntity, TRelation> This interface hosts relation methods for the right side of a relation. Inherited Members IMultiRightRelationBuilder<TEntity, TRelation>.WithMany(Expression<Func<TRelation, IList<TEntity>>>) IRequiredSingleRightRelationBuilder<TEntity, TRelation>.WithOne(Expression<Func<TRelation, TEntity>>) Namespace : Venflow.Modeling.Definitions.Builder Assembly : Venflow.dll Syntax public interface IRequiredMultiRightRelationBuilder<TEntity, TRelation> : IMultiRightRelationBuilder<TEntity, TRelation>, IRequiredSingleRightRelationBuilder<TEntity, TRelation> where TEntity : class, new() where TRelation : class Type Parameters Name Description TEntity TRelation"
  },
  "api/Venflow.Modeling.Definitions.Builder.IRequiredSingleRightRelationBuilder-2.html": {
    "href": "api/Venflow.Modeling.Definitions.Builder.IRequiredSingleRightRelationBuilder-2.html",
    "title": "Interface IRequiredSingleRightRelationBuilder<TEntity, TRelation> | Venflow Documentation",
    "keywords": "Interface IRequiredSingleRightRelationBuilder<TEntity, TRelation> This interface hosts relation methods for the right side of a relation. Namespace : Venflow.Modeling.Definitions.Builder Assembly : Venflow.dll Syntax public interface IRequiredSingleRightRelationBuilder<TEntity, TRelation> where TEntity : class, new() where TRelation : class Type Parameters Name Description TEntity TRelation Methods | Improve this Doc View Source WithOne(Expression<Func<TRelation, TEntity>>) Configures this as a one-to-one relationship. Note that calling this method with no parameters will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified. Declaration IForeignKeyRelationBuilder<TEntity, TRelation> WithOne(Expression<Func<TRelation, TEntity>> navigationProperty) Parameters Type Name Description Expression < Func <TRelation, TEntity>> navigationProperty A lambda expression representing the reference navigation property on the other end of this relationship (blog => blog.BlogInfo). If no property is specified, the relationship will be configured without a navigation property on the other end of the relationship. Returns Type Description IForeignKeyRelationBuilder <TEntity, TRelation> An object that can be used to configure the relationship."
  },
  "api/Venflow.Modeling.Definitions.EntityConfiguration-1.html": {
    "href": "api/Venflow.Modeling.Definitions.EntityConfiguration-1.html",
    "title": "Class EntityConfiguration<TEntity> | Venflow Documentation",
    "keywords": "Class EntityConfiguration<TEntity> Allows configuration for an entity type. Inherit from this class and override the Configure(IEntityBuilder<TEntity>) method to configure the entity TEntity . Inheritance Object EntityConfiguration<TEntity> Namespace : Venflow.Modeling.Definitions Assembly : Venflow.dll Syntax public abstract class EntityConfiguration<TEntity> : object, IEntityConfiguration where TEntity : class, new() Type Parameters Name Description TEntity The entity to be configured. Remarks Classes which inherit from this one, have to be in the same assembly as the Database in order to be discoverable. Methods | Improve this Doc View Source Configure(IEntityBuilder<TEntity>) Allows for configuration of the entity TEntity . Declaration protected abstract void Configure(IEntityBuilder<TEntity> entityBuilder) Parameters Type Name Description IEntityBuilder <TEntity> entityBuilder The builder used to configure the entity."
  },
  "api/Venflow.Modeling.Definitions.html": {
    "href": "api/Venflow.Modeling.Definitions.html",
    "title": "Namespace Venflow.Modeling.Definitions | Venflow Documentation",
    "keywords": "Namespace Venflow.Modeling.Definitions Classes EntityConfiguration<TEntity> Allows configuration for an entity type. Inherit from this class and override the Configure(IEntityBuilder<TEntity>) method to configure the entity TEntity ."
  },
  "api/Venflow.NpgsqlCommandExtensions.html": {
    "href": "api/Venflow.NpgsqlCommandExtensions.html",
    "title": "Class NpgsqlCommandExtensions | Venflow Documentation",
    "keywords": "Class NpgsqlCommandExtensions Provides a set of useful extension methods for the class. Inheritance Object NpgsqlCommandExtensions Namespace : Venflow Assembly : Venflow.dll Syntax public static class NpgsqlCommandExtensions : object Methods | Improve this Doc View Source AddParamter<TType>(NpgsqlCommand, String, TType) Adds a new Parameter to the collection. Declaration public static NpgsqlParameter<TType> AddParamter<TType>(this NpgsqlCommand command, string parameterName, TType value) Parameters Type Name Description NpgsqlCommand command The command to which the Parameter should be added. String parameterName The name of the Parameter. TType value The value of the Parameter. Returns Type Description NpgsqlParameter <TType> the just created . Type Parameters Name Description TType The value type of the Parameter. | Improve this Doc View Source SetInterpolatedCommandText(NpgsqlCommand, FormattableString) Sets the command text of the used . This API does support string interpolation! Declaration public static void SetInterpolatedCommandText(this NpgsqlCommand command, FormattableString sql) Parameters Type Name Description NpgsqlCommand command The command of which the command text should be set. Ensure that you do not pass any user manipulated SQL for this parameter. You should only add parameters trough string interpolation. FormattableString sql A string containing the SQL statement."
  },
  "api/Venflow.ParameterTypeHandler.html": {
    "href": "api/Venflow.ParameterTypeHandler.html",
    "title": "Class ParameterTypeHandler | Venflow Documentation",
    "keywords": "Class ParameterTypeHandler A class which contains methods to configure the used type handlers while parsing Interpolated arguments. Inheritance Object ParameterTypeHandler Namespace : Venflow Assembly : Venflow.dll Syntax public static class ParameterTypeHandler : object Methods | Improve this Doc View Source AddTypeHandler(Type, IParameterTypeHandler) Adds a type handler. Declaration public static void AddTypeHandler(Type type, IParameterTypeHandler typeHandler) Parameters Type Name Description Type type The type to which the type handler should be mapped. IParameterTypeHandler typeHandler The type handler."
  },
  "api/Venflow.Table-1.html": {
    "href": "api/Venflow.Table-1.html",
    "title": "Class Table<TEntity> | Venflow Documentation",
    "keywords": "Class Table<TEntity> A Table<TEntity> is used to perform CRUD operations against the table represented by TEntity . Inheritance Object TableBase <TEntity> Table<TEntity> Inherited Members TableBase<TEntity>.QueryAsync<TReturn>(IQueryCommand<TEntity, TReturn>, CancellationToken) TableBase<TEntity>.QuerySingle(String, Boolean) TableBase<TEntity>.QuerySingle(String, NpgsqlParameter[]) TableBase<TEntity>.QuerySingle(String, IList<NpgsqlParameter>) TableBase<TEntity>.QuerySingle(String, Boolean, NpgsqlParameter[]) TableBase<TEntity>.QueryInterpolatedSingle(FormattableString, Boolean) TableBase<TEntity>.QueryInterpolatedSingle(FormattableSqlStringBuilder, Boolean) TableBase<TEntity>.QueryBatch(String, Boolean) TableBase<TEntity>.QueryBatch(String, NpgsqlParameter[]) TableBase<TEntity>.QueryBatch(String, IList<NpgsqlParameter>) TableBase<TEntity>.QueryBatch(String, Boolean, NpgsqlParameter[]) TableBase<TEntity>.QueryInterpolatedBatch(FormattableString, Boolean) TableBase<TEntity>.QueryInterpolatedBatch(FormattableSqlStringBuilder, Boolean) Namespace : Venflow Assembly : Venflow.dll Syntax public sealed class Table<TEntity> : TableBase<TEntity>, ITable where TEntity : class, new() Type Parameters Name Description TEntity The entity which represents a table in the Database. Methods | Improve this Doc View Source CountAsync(CancellationToken) Asynchronously counts the total rows the current table. Declaration public Task<long> CountAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description Task < Int64 > A task representing the asynchronous operation, with the number of rows. Remarks This method represents the following SQL statement \"SELECT COUNT(*) FROM table\". | Improve this Doc View Source Delete() Creates a new delete command. Declaration public IDeleteCommandBuilder<TEntity> Delete() Returns Type Description IDeleteCommandBuilder <TEntity> A Fluent API Builder for a delete command. Remarks The command will be automatically disposed the underlying after the command got executed once. | Improve this Doc View Source Delete(Boolean) Creates a new delete command. Declaration public IDeleteCommandBuilder<TEntity> Delete(bool disposeCommand) Parameters Type Name Description Boolean disposeCommand Indicates whether or not to dispose the underlying after the command got executed once. Returns Type Description IDeleteCommandBuilder <TEntity> A Fluent API Builder for a delete command. | Improve this Doc View Source DeleteAsync(TEntity, CancellationToken) Asynchronously deletes the provided entity by its defined primary key. Declaration public ValueTask<int> DeleteAsync(TEntity entity, CancellationToken cancellationToken = null) Parameters Type Name Description TEntity entity A TEntity instance representing the row, which will be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows deleted. Remarks This method represents the following SQL statement \"DELETE FROM table WHERE pk = 0\". This API is using parameterized commands. | Improve this Doc View Source DeleteAsync(TEntity[], CancellationToken) Asynchronously deletes the provided entities by their defined primary keys. Declaration public ValueTask<int> DeleteAsync(TEntity[] entities, CancellationToken cancellationToken = null) Parameters Type Name Description TEntity[] entities A set of TEntity instances representing the rows, which will be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows deleted. Remarks This method represents the following SQL statement \"DELETE FROM table WHERE pk = 0\". This API is using parameterized commands. | Improve this Doc View Source DeleteAsync(IEnumerable<TEntity>, CancellationToken) Asynchronously deletes the provided entities by their defined primary keys. Declaration public ValueTask<int> DeleteAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable <TEntity> entities A set of TEntity instances representing the rows, which will be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows deleted. Remarks This method represents the following SQL statement \"DELETE FROM table WHERE pk = 0\". This API is using parameterized commands. | Improve this Doc View Source DeleteAsync(IList<TEntity>, CancellationToken) Asynchronously deletes the provided entities by their defined primary keys. Declaration public ValueTask<int> DeleteAsync(IList<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IList <TEntity> entities A set of TEntity instances representing the rows, which will be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows deleted. Remarks This method represents the following SQL statement \"DELETE FROM table WHERE pk = 0\". This API is using parameterized commands. | Improve this Doc View Source DeleteAsync(List<TEntity>, CancellationToken) Asynchronously deletes the provided entities by their defined primary keys. Declaration public ValueTask<int> DeleteAsync(List<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description List <TEntity> entities A set of TEntity instances representing the rows, which will be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows deleted. Remarks This method represents the following SQL statement \"DELETE FROM table WHERE pk = 0\". This API is using parameterized commands. | Improve this Doc View Source DeleteAsync(IDeleteCommand<TEntity>, TEntity, CancellationToken) Asynchronously deletes the provided entity by its defined primary key. Declaration public ValueTask<int> DeleteAsync(IDeleteCommand<TEntity> deleteCommand, TEntity entity, CancellationToken cancellationToken = null) Parameters Type Name Description IDeleteCommand <TEntity> deleteCommand A IDeleteCommand<TEntity> instance which contains all the settings for this operation. TEntity entity A TEntity instance representing the row, which will be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows deleted. Remarks This method represents the following SQL statement \"DELETE FROM table WHERE pk = 0\". This API is using parameterized commands. | Improve this Doc View Source DeleteAsync(IDeleteCommand<TEntity>, IEnumerable<TEntity>, CancellationToken) Asynchronously deletes the provided entities by their defined primary keys. Declaration public ValueTask<int> DeleteAsync(IDeleteCommand<TEntity> deleteCommand, IEnumerable<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IDeleteCommand <TEntity> deleteCommand A IDeleteCommand<TEntity> instance which contains all the settings for this operation. IEnumerable <TEntity> entities A set of TEntity instances representing the rows, which will be deleted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description ValueTask < Int32 > A task representing the asynchronous operation, with the number of rows deleted. Remarks This method represents the following SQL statement \"DELETE FROM table WHERE pk = 0\". This API is using parameterized commands. | Improve this Doc View Source GetProxiedEntity() Constructs a new proxied instance of the TEntity entity. Declaration public TEntity GetProxiedEntity() Returns Type Description TEntity A TEntity instance which will be change tracked. Remarks Any property which should be change tracked on an entity has to be marked virtual. | Improve this Doc View Source Insert() Creates a new insert command. Declaration public IBaseInsertRelationBuilder<TEntity, TEntity> Insert() Returns Type Description IBaseInsertRelationBuilder <TEntity, TEntity> A Fluent API Builder for a insert command. Remarks The command will be automatically disposed the underlying after the command got executed once. | Improve this Doc View Source Insert(Boolean) Creates a new insert command. Declaration public IBaseInsertRelationBuilder<TEntity, TEntity> Insert(bool disposeCommand) Parameters Type Name Description Boolean disposeCommand Indicates whether or not to dispose the underlying after the command got executed once. Returns Type Description IBaseInsertRelationBuilder <TEntity, TEntity> A Fluent API Builder for a insert command. | Improve this Doc View Source InsertAsync(TEntity, CancellationToken) Asynchronously inserts the entity and all entities reachable from the current provided instance into the current table. Declaration public Task<int> InsertAsync(TEntity entity, CancellationToken cancellationToken = null) Parameters Type Name Description TEntity entity A TEntity instance representing the row, which will be inserted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description Task < Int32 > A task representing the asynchronous operation, with the number of rows inserted. Remarks This method represents the following SQL statement \"INSERT INTO table (foo, bar) VALUES ('foo', 'bar')\". This API is using parameterized commands. | Improve this Doc View Source InsertAsync(IList<TEntity>, CancellationToken) Asynchronously inserts a list of entities and all entities reachable from the current provided instances into the current table. Declaration public Task<int> InsertAsync(IList<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IList <TEntity> entities A list of TEntity instance representing the rows, which will be inserted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description Task < Int32 > A task representing the asynchronous operation, with the number of rows inserted. Remarks This method represents the following SQL statement \"INSERT INTO table (foo, bar) VALUES ('foo', 'bar'), ('foo', 'bar')\". This API is using parameterized commands. | Improve this Doc View Source InsertAsync(IInsertCommand<TEntity>, TEntity, CancellationToken) Asynchronously inserts the entity and all entities reachable from the current provided instance into the current table. Declaration public Task<int> InsertAsync(IInsertCommand<TEntity> insertCommand, TEntity entity, CancellationToken cancellationToken = null) Parameters Type Name Description IInsertCommand <TEntity> insertCommand A IInsertCommand<TEntity> instance which contains all the settings for this operation. TEntity entity A TEntity instance representing the row, which will be inserted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description Task < Int32 > A task representing the asynchronous operation, with the number of rows inserted. Remarks This method represents the following SQL statement \"INSERT INTO table (foo, bar) VALUES ('foo', 'bar')\". This API is using parameterized commands. | Improve this Doc View Source InsertAsync(IInsertCommand<TEntity>, List<TEntity>, CancellationToken) Asynchronously inserts a list of entities and all entities reachable from the current provided instances into the current table. Declaration public Task<int> InsertAsync(IInsertCommand<TEntity> insertCommand, List<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IInsertCommand <TEntity> insertCommand A IInsertCommand<TEntity> instance which contains all the settings for this operation. List <TEntity> entities A list of TEntity instance representing the rows, which will be inserted. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description Task < Int32 > A task representing the asynchronous operation, with the number of rows inserted. Remarks This method represents the following SQL statement \"INSERT INTO table (foo, bar) VALUES ('foo', 'bar'), ('foo', 'bar')\". This API is using parameterized commands. | Improve this Doc View Source TrackChanges(ref TEntity) Starts tracking the provided TEntity . Declaration public void TrackChanges(ref TEntity entity) Parameters Type Name Description TEntity entity A TEntity instance which will be change tracked. Remarks Any property which should be change tracked on an entity has to be marked virtual. | Improve this Doc View Source TrackChanges(IList<TEntity>) Starts tracking the provided TEntity 's. Declaration public void TrackChanges(IList<TEntity> entities) Parameters Type Name Description IList <TEntity> entities A set of TEntity instances which will be change tracked. Remarks This method represents the following SQL statement \"UPDATE table SET foo = 'foo' WHERE pk = 0\". This API is using parameterized commands. | Improve this Doc View Source TruncateAsync(ForeignTruncateOptions, CancellationToken) Asynchronously truncates the current table with the provided options. Declaration public Task TruncateAsync(ForeignTruncateOptions foreignOptions, CancellationToken cancellationToken = null) Parameters Type Name Description ForeignTruncateOptions foreignOptions Specifies how the truncate operation should handle foreign tables. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description Task A task representing the asynchronous operation. Remarks This method represents the following SQL statement \"TRUNCATE table [CASCADE|RESTRICT|NONE]\". | Improve this Doc View Source TruncateAsync(IdentityTruncateOptions, ForeignTruncateOptions, CancellationToken) Asynchronously truncates the current table with the provided options. Declaration public Task TruncateAsync(IdentityTruncateOptions truncateOptions = default(IdentityTruncateOptions), ForeignTruncateOptions foreignOptions = default(ForeignTruncateOptions), CancellationToken cancellationToken = null) Parameters Type Name Description IdentityTruncateOptions truncateOptions Specifies how the truncate operation should handle identities in the table. ForeignTruncateOptions foreignOptions Specifies how the truncate operation should handle foreign tables. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description Task A task representing the asynchronous operation. Remarks This method represents the following SQL statement \"TRUNCATE table [RESTART IDENTITY|CONTINUE IDENTITY|NONE] [CASCADE|RESTRICT|NONE]\". | Improve this Doc View Source Update() Creates a new update command. Declaration public IUpdateCommandBuilder<TEntity> Update() Returns Type Description IUpdateCommandBuilder <TEntity> A Fluent API Builder for a update command. | Improve this Doc View Source Update(Boolean) Creates a new update command. Declaration public IUpdateCommandBuilder<TEntity> Update(bool disposeCommand) Parameters Type Name Description Boolean disposeCommand Indicates whether or not to dispose the underlying after the command got executed once. Returns Type Description IUpdateCommandBuilder <TEntity> A Fluent API Builder for a update command. | Improve this Doc View Source UpdateAsync(TEntity, CancellationToken) Asynchronously updates the provided entity by its defined primary keys. Declaration public ValueTask UpdateAsync(TEntity entity, CancellationToken cancellationToken = null) Parameters Type Name Description TEntity entity A TEntity instance representing the row, which will be updated. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description ValueTask A task representing the asynchronous operation. Remarks This method represents the following SQL statement \"UPDATE table SET foo = 'foo' WHERE pk = 0\". This API is using parameterized commands. | Improve this Doc View Source UpdateAsync(TEntity[], CancellationToken) Asynchronously updates the provided entity by its defined primary keys. Declaration public ValueTask UpdateAsync(TEntity[] entities, CancellationToken cancellationToken = null) Parameters Type Name Description TEntity[] entities A set of TEntity instances representing the rows, which will be updated. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description ValueTask A task representing the asynchronous operation. Remarks This method represents the following SQL statement \"UPDATE table SET foo = 'foo' WHERE pk = 0\". This API is using parameterized commands. | Improve this Doc View Source UpdateAsync(IEnumerable<TEntity>, CancellationToken) Asynchronously updates the provided entity by its defined primary keys. Declaration public ValueTask UpdateAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IEnumerable <TEntity> entities A set of TEntity instances representing the rows, which will be updated. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description ValueTask A task representing the asynchronous operation. Remarks This method represents the following SQL statement \"UPDATE table SET foo = 'foo' WHERE pk = 0\". This API is using parameterized commands. | Improve this Doc View Source UpdateAsync(IList<TEntity>, CancellationToken) Asynchronously updates the provided entity by its defined primary keys. Declaration public ValueTask UpdateAsync(IList<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IList <TEntity> entities A set of TEntity instances representing the rows, which will be updated. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description ValueTask A task representing the asynchronous operation. Remarks This method represents the following SQL statement \"UPDATE table SET foo = 'foo' WHERE pk = 0\". This API is using parameterized commands. | Improve this Doc View Source UpdateAsync(List<TEntity>, CancellationToken) Asynchronously updates the provided entity by its defined primary keys. Declaration public ValueTask UpdateAsync(List<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description List <TEntity> entities A set of TEntity instances representing the rows, which will be updated. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description ValueTask A task representing the asynchronous operation. Remarks This method represents the following SQL statement \"UPDATE table SET foo = 'foo' WHERE pk = 0\". This API is using parameterized commands. | Improve this Doc View Source UpdateAsync(IUpdateCommand<TEntity>, TEntity, CancellationToken) Asynchronously updates the provided entity by its defined primary keys. Declaration public ValueTask UpdateAsync(IUpdateCommand<TEntity> updateCommand, TEntity entity, CancellationToken cancellationToken = null) Parameters Type Name Description IUpdateCommand <TEntity> updateCommand A IUpdateCommand<TEntity> instance which contains all the settings for this operation. TEntity entity A TEntity instance representing the row, which will be updated. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description ValueTask A task representing the asynchronous operation. Remarks This method represents the following SQL statement \"UPDATE table SET foo = 'foo' WHERE pk = 0\". This API is using parameterized commands. | Improve this Doc View Source UpdateAsync(IUpdateCommand<TEntity>, IEnumerable<TEntity>, CancellationToken) Asynchronously updates the provided entity by its defined primary keys. Declaration public ValueTask UpdateAsync(IUpdateCommand<TEntity> updateCommand, IEnumerable<TEntity> entities, CancellationToken cancellationToken = null) Parameters Type Name Description IUpdateCommand <TEntity> updateCommand A IUpdateCommand<TEntity> instance which contains all the settings for this operation. IEnumerable <TEntity> entities A set of TEntity instances representing the rows, which will be updated. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description ValueTask A task representing the asynchronous operation. Remarks This method represents the following SQL statement \"UPDATE table SET foo = 'foo' WHERE pk = 0\". This API is using parameterized commands."
  },
  "api/Venflow.TableBase-1.html": {
    "href": "api/Venflow.TableBase-1.html",
    "title": "Class TableBase<TEntity> | Venflow Documentation",
    "keywords": "Class TableBase<TEntity> A TableBase<TEntity> is used to perform query operations of all sorts. Inheritance Object TableBase<TEntity> Table<TEntity> Namespace : Venflow Assembly : Venflow.dll Syntax public class TableBase<TEntity> : object where TEntity : class, new() Type Parameters Name Description TEntity The entity which represents a table in the Database. Methods | Improve this Doc View Source QueryAsync<TReturn>(IQueryCommand<TEntity, TReturn>, CancellationToken) Asynchronously queries one or more entities with the configured joins. Declaration public Task<TReturn> QueryAsync<TReturn>(IQueryCommand<TEntity, TReturn> queryCommand, CancellationToken cancellationToken = null) where TReturn : class, new() Parameters Type Name Description IQueryCommand <TEntity, TReturn> queryCommand A IQueryCommand<TEntity, TReturn> instance representing the query which will be performed. CancellationToken cancellationToken The cancellation token, which is used to cancel the operation. Returns Type Description Task <TReturn> A task representing the asynchronous operation, with the result of the executed query. Type Parameters Name Description TReturn Remarks This method could represents the following SQL statement \"SELECT * FROM table\". | Improve this Doc View Source QueryBatch(String, IList<NpgsqlParameter>) Creates a new query command, which expects a set of primary rows to be returned. This API does not support string interpolation! If you want to pass interpolated SQL use QueryInterpolatedSingle(FormattableString, Boolean) . Declaration public IBaseQueryRelationBuilder<TEntity, TEntity, List<TEntity>> QueryBatch(string sql, IList<NpgsqlParameter> parameters) Parameters Type Name Description String sql A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. IList < NpgsqlParameter > parameters A set of which contain parameters for the sql command. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, List <TEntity>> A Fluent API Builder for a query command. Remarks The command will be automatically disposed the underlying after the command got executed once. | Improve this Doc View Source QueryBatch(String, NpgsqlParameter[]) Creates a new query command, which expects a set of primary rows to be returned. This API does not support string interpolation! If you want to pass interpolated SQL use QueryInterpolatedSingle(FormattableString, Boolean) . Declaration public IBaseQueryRelationBuilder<TEntity, TEntity, List<TEntity>> QueryBatch(string sql, params NpgsqlParameter[] parameters) Parameters Type Name Description String sql A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. NpgsqlParameter [] parameters A set of which contain parameters for the sql command. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, List <TEntity>> A Fluent API Builder for a query command. Remarks The command will be automatically disposed the underlying after the command got executed once. | Improve this Doc View Source QueryBatch(String, Boolean) Creates a new query command, which expects a set of primary rows to be returned. This API does not support string interpolation! If you need to pass parameters with the query, either use QuerySingle(String, NpgsqlParameter[]) or QueryInterpolatedSingle(FormattableString, Boolean) . Declaration public IBaseQueryRelationBuilder<TEntity, TEntity, List<TEntity>> QueryBatch(string sql, bool disposeCommand = true) Parameters Type Name Description String sql A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. Boolean disposeCommand Indicates whether or not to dispose the underlying after the command got executed once. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, List <TEntity>> A Fluent API Builder for a query command. | Improve this Doc View Source QueryBatch(String, Boolean, NpgsqlParameter[]) Creates a new query command, which expects a set of primary rows to be returned. This API does not support string interpolation! If you want to pass interpolated SQL use QueryInterpolatedSingle(FormattableString, Boolean) . Declaration public IBaseQueryRelationBuilder<TEntity, TEntity, List<TEntity>> QueryBatch(string sql, bool disposeCommand, params NpgsqlParameter[] parameters) Parameters Type Name Description String sql A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. Boolean disposeCommand Indicates whether or not to dispose the underlying after the command got executed once. NpgsqlParameter [] parameters A set of which contain parameters for the sql command. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, List <TEntity>> A Fluent API Builder for a query command. | Improve this Doc View Source QueryInterpolatedBatch(FormattableString, Boolean) Creates a new query command, which expects a set of primary rows to be returned. This API does support string interpolation! . Declaration public IBaseQueryRelationBuilder<TEntity, TEntity, List<TEntity>> QueryInterpolatedBatch(FormattableString sql, bool disposeCommand = true) Parameters Type Name Description FormattableString sql A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. You should only add parameters trough string interpolation. Boolean disposeCommand Indicates whether or not to dispose the underlying after the command got executed once. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, List <TEntity>> A Fluent API Builder for a query command. | Improve this Doc View Source QueryInterpolatedBatch(FormattableSqlStringBuilder, Boolean) Creates a new query command, which expects a set of primary rows to be returned. This API does support string interpolation! . Declaration public IBaseQueryRelationBuilder<TEntity, TEntity, List<TEntity>> QueryInterpolatedBatch(FormattableSqlStringBuilder sql, bool disposeCommand = true) Parameters Type Name Description FormattableSqlStringBuilder sql A FormattableSqlStringBuilder instance containing the SQL statement. Boolean disposeCommand Indicates whether or not to dispose the underlying after the command got executed once. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, List <TEntity>> A Fluent API Builder for a query command. | Improve this Doc View Source QueryInterpolatedSingle(FormattableString, Boolean) Creates a new query command, which expects a single returned primary row. This API does support string interpolation! . Declaration public IBaseQueryRelationBuilder<TEntity, TEntity, TEntity> QueryInterpolatedSingle(FormattableString sql, bool disposeCommand = true) Parameters Type Name Description FormattableString sql A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. You should only add parameters trough string interpolation. Boolean disposeCommand Indicates whether or not to dispose the underlying after the command got executed once. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, TEntity> A Fluent API Builder for a query command. | Improve this Doc View Source QueryInterpolatedSingle(FormattableSqlStringBuilder, Boolean) Creates a new query command, which expects a single returned primary row. This API does support string interpolation! . Declaration public IBaseQueryRelationBuilder<TEntity, TEntity, TEntity> QueryInterpolatedSingle(FormattableSqlStringBuilder sql, bool disposeCommand = true) Parameters Type Name Description FormattableSqlStringBuilder sql A FormattableSqlStringBuilder instance containing the SQL statement. Boolean disposeCommand Indicates whether or not to dispose the underlying after the command got executed once. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, TEntity> A Fluent API Builder for a query command. | Improve this Doc View Source QuerySingle(String, IList<NpgsqlParameter>) Creates a new query command, which expects a single returned primary row. This API does not support string interpolation! If you want to pass interpolated SQL use QueryInterpolatedSingle(FormattableString, Boolean) . Declaration public IBaseQueryRelationBuilder<TEntity, TEntity, TEntity> QuerySingle(string sql, IList<NpgsqlParameter> parameters) Parameters Type Name Description String sql A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. IList < NpgsqlParameter > parameters A set of which contain parameters for the sql command. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, TEntity> A Fluent API Builder for a query command. Remarks The command will be automatically disposed the underlying after the command got executed once. | Improve this Doc View Source QuerySingle(String, NpgsqlParameter[]) Creates a new query command, which expects a single returned primary row. This API does not support string interpolation! If you want to pass interpolated SQL use QueryInterpolatedSingle(FormattableString, Boolean) . Declaration public IBaseQueryRelationBuilder<TEntity, TEntity, TEntity> QuerySingle(string sql, params NpgsqlParameter[] parameters) Parameters Type Name Description String sql A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. NpgsqlParameter [] parameters A set of which contain parameters for the sql command. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, TEntity> A Fluent API Builder for a query command. Remarks The command will be automatically disposed the underlying after the command got executed once. | Improve this Doc View Source QuerySingle(String, Boolean) Creates a new query command, which expects a single returned primary row. This API does not support string interpolation! If you need to pass parameters with the query, either use QuerySingle(String, NpgsqlParameter[]) or QueryInterpolatedSingle(FormattableString, Boolean) . Declaration public IBaseQueryRelationBuilder<TEntity, TEntity, TEntity> QuerySingle(string sql, bool disposeCommand = true) Parameters Type Name Description String sql A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. Boolean disposeCommand Indicates whether or not to dispose the underlying after the command got executed once. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, TEntity> A Fluent API Builder for a query command. | Improve this Doc View Source QuerySingle(String, Boolean, NpgsqlParameter[]) Creates a new query command, which expects a single returned primary row. This API does not support string interpolation! If you want to pass interpolated SQL use QueryInterpolatedSingle(FormattableString, Boolean) . Declaration public IBaseQueryRelationBuilder<TEntity, TEntity, TEntity> QuerySingle(string sql, bool disposeCommand, params NpgsqlParameter[] parameters) Parameters Type Name Description String sql A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. Boolean disposeCommand Indicates whether or not to dispose the underlying after the command got executed once. NpgsqlParameter [] parameters A set of which contain parameters for the sql command. Returns Type Description IBaseQueryRelationBuilder <TEntity, TEntity, TEntity> A Fluent API Builder for a query command."
  },
  "api/Venflow.TypeArgumentException.html": {
    "href": "api/Venflow.TypeArgumentException.html",
    "title": "Class TypeArgumentException | Venflow Documentation",
    "keywords": "Class TypeArgumentException Represents an error which occur when an invalid type argument gets passed to a generic method. Inheritance Object TypeArgumentException Namespace : Venflow Assembly : Venflow.dll Syntax public class TypeArgumentException : Exception Constructors | Improve this Doc View Source TypeArgumentException(String) Declaration public TypeArgumentException(string message) Parameters Type Name Description String message | Improve this Doc View Source TypeArgumentException(String, Exception) Declaration public TypeArgumentException(string message, Exception inner) Parameters Type Name Description String message Exception inner | Improve this Doc View Source TypeArgumentException(String, String) Declaration public TypeArgumentException(string message, string type) Parameters Type Name Description String message String type"
  },
  "api/Venflow.VenflowConfiguration.html": {
    "href": "api/Venflow.VenflowConfiguration.html",
    "title": "Class VenflowConfiguration | Venflow Documentation",
    "keywords": "Class VenflowConfiguration Contains methods to globally set the configuration of Venflow. Inheritance Object VenflowConfiguration Namespace : Venflow Assembly : Venflow.dll Syntax public static class VenflowConfiguration : object Properties | Improve this Doc View Source DynamicCacheExpirationTime Determines the expiration duration time of the underlying SQL Materializer Cache in seconds, defaults to 5 minutes. Declaration public static long DynamicCacheExpirationTime { get; } Property Value Type Description Int64 Remarks Venflow uses the SQL used in queries to map a materializer to this specific query. This is faster, than using the returned columns and used relations as a cache key. If a query with the executed SQL won't be called again within the next DynamicCacheExpirationTime , it will be removed from the cache. However do note, that the materializer itself will not be removed from the cache. | Improve this Doc View Source ShouldUseDeepValidation Determines whether or not Venflow will perform more extensive validation through out its usage. This setting will be set to true automatically, if you are in DEBUG, otherwise false . Declaration public static bool ShouldUseDeepValidation { get; } Property Value Type Description Boolean | Improve this Doc View Source ThrowLoggedExceptions Determines whether or not Venflow will propagate exceptions to the caller of a command, if the exception is being logged. Defaults to true . Declaration public static bool ThrowLoggedExceptions { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source SetDynamicCacheExpirationTime(Int64) Sets the value of the DynamicCacheExpirationTime property. Declaration public static void SetDynamicCacheExpirationTime(long expirationTime) Parameters Type Name Description Int64 expirationTime The expiration duration time in seconds. | Improve this Doc View Source SetDynamicCacheExpirationTime(TimeSpan) Sets the value of the DynamicCacheExpirationTime property. Declaration public static void SetDynamicCacheExpirationTime(TimeSpan timeSpan) Parameters Type Name Description TimeSpan timeSpan The expiration duration time. | Improve this Doc View Source UseDeepValidation(Boolean) Changes the value of the ShouldUseDeepValidation property. Declaration public static void UseDeepValidation(bool validation) Parameters Type Name Description Boolean validation Determines if Venflow should use deep validation or not."
  },
  "guides/advanced/enums.html": {
    "href": "guides/advanced/enums.html",
    "title": "Enums with Venflow | Venflow Documentation",
    "keywords": "Enums with Venflow Enums are quite heavily used in C# and PostgreSQL, there are two different options of mapping you can choose from. By default any enum will be mapped as the underlying numeric data type in the database. However if you want to use a native PostgreSQL enum you have to specify that in the Configuration of your entity. public class FooConfiguration : EntityConfiguration<Foo> { protected override void Configure(IEntityBuilder<Foo> entityBuilder) { entityBuilder.MapPostgresEnum(x => x.Bar); } } Note It is enough to map your PostgreSQL enum once in an assembly. However, if you prefer, you can also configure it multiple times. Note By default the name of the enum within C# will be converted to a lower-cased _ separated name. That means FooBaz would be converted to foo_baz . If you want to override any of the naming behaviours you can pass a valid value to the name / npgsqlNameTranslator parameters."
  },
  "guides/advanced/interpolation.html": {
    "href": "guides/advanced/interpolation.html",
    "title": "Interpolation with Venflow | Venflow Documentation",
    "keywords": "Interpolation with Venflow If you never heard about string interpolation you should check the official docs . Writing SQL can be a real pain especially while writing in by hand and keeping it injection safe. However Venflow tries to help you with all of that, especially by providing a simple way to write injection safe SQL. All API's which allow for SQL with parameters also have a counterpart called something along the lines of *Interpolation*. They accept a FormattableString which allow for interpolated strings. Lets take a look at how this would like with a query, that queries all blogs with a similar one to the name provided by the user. var name = Console.ReadLine(); // The name of the blogs to find with a similar name var blogs = await database.Blogs.QueryInterpolatedBatch($@\"SELECT * FROM \"\"Blogs\"\" WHERE \"\"Name\"\" LIKE {name}\") .QueryAsync(); Warning This way of injecting parameters is totally safe, however you need to be very careful to always choose the interpolation methods while doing this. Extract interpolated SQL into variables If your SQL statement is a little bit larger than usual you might want to extract your string to a local variable or similar. However you need to be careful while choosing the variable type. Your habits might want to tell you to choose a string or var however you need to make sure that you explicitly set the variable type to FormattableString . Otherwise the string interpolation happens inline and no parameterizing by Venflow will happen. Down below you will see a simple example of how that would look like. FormattableString sql = $@\"SELECT * FROM \"\"Blogs\"\" WHERE \"\"Name\"\" LIKE {Console.ReadLine()}\"; var blogs = await database.Blogs.QueryInterpolatedBatch(sql) .QueryAsync(); Supported interpolation types At the current state you can use all types Npgsql supports , as well as a few neat features Venflow implemented such as the support for ulong , ulong? and all types that implement IList<T> , this includes types such as arrays and all collections that implement it. Lets look at its behaviour with an example. var blogIds = new int[3] { 1, 2, 3 }; FormattableString sql = $@\"SELECT * FROM \"\"Blogs\"\" WHERE \"\"Id\"\" IN ({blogIds})\"; var blogs = await database.Blogs.QueryInterpolatedBatch(sql) .QueryAsync(); This will query all blogs with the ids 1 , 2 and 3 . The above written SQL statement will be converted to the following: \"SELECT * FROM \"\"Blogs\"\" WHERE \"\"Id\"\" IN (1, 2, 3)\" Of course the numbers usually would be parametrized, however for the sake of this example it contains the values directly."
  },
  "guides/advanced/logging.html": {
    "href": "guides/advanced/logging.html",
    "title": "Logging with Venflow | Venflow Documentation",
    "keywords": "Logging with Venflow Logging in general is a very important topic, especially in a scenario like this, in which the ORM partially creates SQL. At the current state Venflow supports logging only in a few specific cases. As of now this only covers all Query operations including QuerySingle and QueryBatch as well as their interpolation counterparts. Setup the logging provider You configure your logging provider on a Database basis, by overriding the Configure method. For this example, lets use the database which you already know from the Setup Guide . By using the provided DatabaseOptionsBuilder , you can call the LogTo method on it. It accepts two parameters, the logging action itself as well as an optional Boolean to tell whether or not to log sensitive data to this logger. However it is important to note that Venflow, at least at the current state, only logs the executed SQL statements and nothing else. Note The sensitive data logging is a bit special since it populates the parameters on the client, rather than the server. This means, that the populated SQL might not always be 100% accurate. It internally uses the NpgsqlCommandExtensions.GetUnParameterizedCommandText extension method to do that. However it also got some other caveats, you can get more information by further inspecting the API reference. public class BlogDatabase : Database { public Table<Blog> Blogs { get; set; } public Table<Post> Posts { get; set; } public BlogDatabase() : base(\"Your connection string.\") { } protected override void Configure(DatabaseOptionsBuilder optionsBuilder) { // You can also configure multiple loggers. optionsBuilder.LogTo(message => { Console.WriteLine(message); }); } } Setup the logging provider in a more specific manner You don't always want the ORM to log every single SQL statement ever to be executed, in this case Venflow allows to individually override the logging behaviour on a command basis by calling LogTo on the method chain. In the example down below, all globally defined loggers will be overridden by the loggers configured on the command. FormattableString sql = $@\"SELECT * FROM \"\"Blogs\"\" WHERE \"\"Id\"\" = {someId} LIMIT 1\"; var blog = await database.Blogs.QueryInterpolatedSingle(sql) .LogTo(Console.WriteLine) // You can also configure multiple loggers. .QueryAsync(); However, lets assume you wouldn't want to configure the logger on a command basis, but would rather cherry pick the commands. In that case you would need to set the DatabaseOptionsBuilder.DefaultLoggingBehavior to DefaultLoggingBehavior.Never in the same method you configured the global logger. Then you would want to call LogTo on all commands you would want to be logged."
  },
  "guides/advanced/nullables.html": {
    "href": "guides/advanced/nullables.html",
    "title": "Nullables with Venflow | Venflow Documentation",
    "keywords": "Nullables with Venflow Since C#8 null-able reference types are supported which help you writing better code and improves the IntelliSense. However for Venflow this also is a big deal. If you have specified <Nullable>enable</Nullable> in your .csproj file you opt-in for this feature. You will then be forced to mark all fields as null-able which are also marked as null-able in your database. That way Venflow can produce way more optimized code. Warning You will also be forced to apply the null-able identifiers for all foreign-keys and navigation properties, if they are indeed null-able."
  },
  "guides/advanced/prepared_statements.html": {
    "href": "guides/advanced/prepared_statements.html",
    "title": "Statement Preparation with Venflow | Venflow Documentation",
    "keywords": "Statement Preparation with Venflow You can also prepare Query statements with Venflow through the Query Builder. This would look something like the following. var someId = 10; var query = await database.Blogs.QueryInterpolatedBatch($@\"SELECT * FROM \"\"Blogs\"\" WHERE \"\"Id\"\" = {someId}\", false) .Build() .PrepareAsync(); // You need to store this stamenet in a field or similar and reuse it, every time you want to query through this prepared statment. var blogs = await _database.Blogs.QueryAsync(query); // You can also inline this with the line above. Note Also do not forget to call UnprepareAsync or DisposeAsync on this command once you no longer need it. Note One handy feature that comes in for you, is that you can use this prepared command with any Database instance."
  },
  "guides/advanced/query_command_cache.html": {
    "href": "guides/advanced/query_command_cache.html",
    "title": "Caching Command Queries | Venflow Documentation",
    "keywords": "Caching Command Queries Do note, that this guide is not about Query Response Caching, but rather about caching the underlying command. Venflow uses different methods to cache the underlying query result parser aka. query materializer. There are two layers to this caching mechanism, where the first one is by SQL query string and the second one by the actual properties of the query such as returned columns. There is not much for you to configure, however if you do wish you can configure the cache expiration time of the first layer. This is important, in order to prevent too much memory allocation by the SQL query strings. In the example shown below, the cache expiration time is set to 10 minutes instead of the default of 5 minutes. VenflowConfiguration.SetDynamicCacheExpirationTime(TimeSpan.FromMinutes(10)); Note Once a SQL query reached its expiration time, it will indeed be removed from the first layer cache, however once it will be executed again, it will NOT need to recompile the query materializer, since it calls the slower, but memory-lighter second layer cache instead."
  },
  "guides/advanced/validation.html": {
    "href": "guides/advanced/validation.html",
    "title": "Validation with Venflow | Venflow Documentation",
    "keywords": "Validation with Venflow Venflow performs a lot of validation under the hood, to perform the best possible UX. However this comes at a performance trade-off. Therefore Venflow only performs these validation, if you are using Venflow in a DEBUG build. If you would compile your assembly to RELEASE these validations wouldn't be performed. In order to manually override this behaviour you can configure this setting with the static VenflowConfiguration class. In the below example we would tell Venflow, to always use 'Deep Validation', no matter the configuration. You should place this at very beginning of your program, however you can change this value whenever you want. VenflowConfiguration.UseDeepValidation(true);"
  },
  "guides/getting_started/installation.html": {
    "href": "guides/getting_started/installation.html",
    "title": "Installing Venflow | Venflow Documentation",
    "keywords": "Venflow Installation Supported Platforms Venflow supports .Net Framework 4.8 , .Net Standard 2.1 , .Net Core 3.1 and the latest pre-releases of .Net 5 . Installation from NuGet Venflow is distributed through the official NuGet feed as a lot of the other packages, which makes its install as easy as its get. Warning For now Venflow is published under the pre-release tag and might still contain bugs or other issues, if you encounter something please create an issue over on GitHub. Using Visual Studio Using the Nuget Package Manager Right click on 'References', and select 'Manage NuGet packages' Check the 'include prerelease' checkbox In the \"Browse\" tab, search for Venflow Click install. Click on 'Tools', 'Nuget Package Manager' and 'Package Manager Console' Enter Install-Package Venflow"
  },
  "guides/getting_started/setup.html": {
    "href": "guides/getting_started/setup.html",
    "title": "Setup Venflow | Venflow Documentation",
    "keywords": "Venflow Setup Configure the Database Warning Be aware, that LINQPad may throw unexpected errors and you therefore should use a real .Net Project instead. In Venflow you are reflecting your PostgreSQL database with the Database class, which will host all of your tables. In the following example we will configure a database containing two tables, Blogs and Posts . One Blog contains many posts and a post contains a single Blog. public class BlogDatabase : Database { public Table<Blog> Blogs { get; set; } public Table<Post> Posts { get; set; } public BlogDatabase() : base(\"Your connection string.\") { } } Note Usually you would use your Database with an IOC Container and register it as a Transient / Scoped depending on the use. Warning This class represents a connection to your database and therefore doesn't support multi threaded use. Entities Entities represent a row inside a table of your database, for our current example this would look something like the following. Entities have to follow a specific schema: The Entity itself has to be public. All properties representing a column have to be public and need to have a public setter. public class Blog { public int Id { get; set; } public string Name { get; set; } public IList<Post> Posts { get; } public Blog() { Posts = new List<Post>(); } } public class Post { public int Id { get; set; } public string Title { get; set; } public string Content { get; set; } public int BlogId { get; set; } public Blog Blog { get; set; } } Note You don't necessarily need to instantiate the Posts navigation property on the Blog Entity, since Venflow will instantiate them otherwise. However in most cases it is more convenient to instantiate them on your own, otherwise foreign collections might be null ! Warning All properties which you want to be updateable by change-tracking have to be marked as virtual! Configuring Entities Now lets configure the actual relation between Blogs and Posts through the EntityConfiguration<T> class. In the Configure , method you can configure several things such as the name of the table this entity should map to and much more. These configuration classes do automatically get discovered, if they are in the same assembly as the Database class. If they are not in the same assembly, you can override the Configure method in the Database class which passes in a DatabaseOptionsBuilder , which will allow you to specify assemblies which should also be searched for entity configurations. public class BlogConfiguration : EntityConfiguration<Blog> { protected override void Configure(IEntityBuilder<Blog> entityBuilder) { entityBuilder.HasMany(b => b.Posts) .WithOne(p => p.Blog) .UsingForeignKey(p => p.BlogId); } } Note Most of the configurations have to be configured with the EntityConfiguration<T> class, however there are a few exceptions to this rule. Primary Keys get automatically mapped if they are named Id or decorated with the KeyAttribute . A property can also be ignored with the NotMappedAttribute ."
  },
  "guides/introduction/intro.html": {
    "href": "guides/introduction/intro.html",
    "title": "Introduction to Venflow | Venflow Documentation",
    "keywords": "Introduction Welcome to the documentation, there are a few requirements your skills should meet. Pretty solid understanding of C#, if not take a look at the C# Programming Guide Experience with SQL Queries and PostgreSQL in general In the guides section you can find information on how to install Venflow and articles which help you to get started. You need more help? Feel free to create a GitHub issue or join the Discord Server ."
  },
  "guides/operations/count.html": {
    "href": "guides/operations/count.html",
    "title": "Count with Venflow | Venflow Documentation",
    "keywords": "Count Rows with Venflow Your Database class exposes Table<T> properties which expose count operations. In Venflow counts are always automatically generated. For this example, we want to get the amount of rows in the Posts table. await database.Posts.CountAsync();"
  },
  "guides/operations/delete.html": {
    "href": "guides/operations/delete.html",
    "title": "Delete with Venflow | Venflow Documentation",
    "keywords": "Delete Data with Venflow Your Database class exposes Table<T> properties which expose delete operations. In Venflow deletes are always automatically generated. For this example, we want to delete a blog with all of its posts at once. var blog = await database.Blogs.QuerySingle(@\"SELECT * FROM \"\"Blogs\"\" LIMIT 1\").QueryAsync(); await database.Blogs.DeleteAsync(blog); As an alternative, if you already have the primary key of the blog you want to delete you can create a new Blog instance. await database.Blogs.DeleteAsync(new Blog { Id = 1 });"
  },
  "guides/operations/execute.html": {
    "href": "guides/operations/execute.html",
    "title": "Execute with Venflow | Venflow Documentation",
    "keywords": "Execute SQL with Venflow Warning Be carful while dealing with raw SQL and ensure that you never pass user modified SQL to any of the methods. Instead use parameterized overloads or the Interpolated siblings. Your Database class exposes Execute methods which allow for fully custom SQL. In this example we drop a table. await database.ExecuteAsync(@\"DROP TABLE \"\"Foo\"\"\");"
  },
  "guides/operations/insert.html": {
    "href": "guides/operations/insert.html",
    "title": "Insert with Venflow | Venflow Documentation",
    "keywords": "Insert Data with Venflow Your Database class exposes Table<T> properties which expose insert operations. In Venflow insert are always automatically generated. For this example, we want to insert a blog with a few posts at once. var blog = new Blog { Name = \"My new Blog\", Posts = new List<Post> { new Post { Title = \"This is my first Post\", Content = \"Hey there.\" }, new Post { Title = \"This is my second Post\", Content = \"Hey there again!\" } } }; await database.Blogs.InsertAsync(blog); Insert Data without relations One of the nice things with Venflow is, that you don't need to set all navigation properties to null, if you don't want to insert them. In this example we would have posts with a blog, but we only want to insert the blog. var blog = new Blog { Name = \"My new Blog\", Posts = new List<Post> { new Post { Title = \"This is my first Post\", Content = \"Hey there.\" }, new Post { Title = \"This is my second Post\", Content = \"Hey there again!\" } } }; await database.Blogs.Insert().InsertAsync(blog); Note This builder exposes similar methods to the Query builder, you can use InsertWith and AndWith to further configure the insert. Note The method InsertWithAll will insert with all populated and reachable relations. This is the equivalent to calling database.Blogs.InsertAsync() ."
  },
  "guides/operations/query.html": {
    "href": "guides/operations/query.html",
    "title": "Query with Venflow | Venflow Documentation",
    "keywords": "Query Data with Venflow Warning Be carful while dealing with raw SQL and ensure that you never pass user modified SQL to any of the methods. Instead use parameterized overloads or the Interpolated siblings. Warning The primary key always has to be the first column of a given table returned by an SQL Query. Query data without relations Your Database class exposes Table<T> properties which expose query operations. In Venflow queries are based on hand-written SQL. In this case we query the first 10 blogs in the database. await using var database = new BlogDatabase(); // You should register this in a Transient/Scoped your IOC Container. // You can re-use this in different BlogDatabase instances through the database.Blogs.QueryAsync() method // If you intend to reuse the query below you need to pass the QueryBatch method false for the disposeCommand, // otherwise the underyling command will be disposed after the first use. var query = database.Blogs.QueryBatch(@\"SELECT * FROM \"\"Blogs\"\" LIMIT 10\").Build(); var blogs = await query.QueryAsync(); // You can also inline this with the line above. Additionally if you do not intend to reuse the the command instance you can omit the Build method call and directly call QueryAsync . Also, if you instead only wanted to query the first result, you can use the QuerySingle API. var blog = await database.Blogs.QuerySingle(@\"SELECT * FROM \"\"Blogs\"\" LIMIT 1\").QueryAsync(); Query data with relations In this case we want to get the first 5 blogs with all of their posts. If you want to perform a join, the builder exposes the JoinWith and the ThenWith method to perform nested joins. const string sql = @\"SELECT * FROM ( SELECT * FROM \"\"Blogs\"\" LIMIT 5 ) AS \"\"Blogs\"\" JOIN \"\"Posts\"\" ON \"\"Posts\"\".\"\"BlogId\"\" = \"\"Blogs\"\".\"\"Id\"\"\"; var query = await database.Blogs.QueryBatch(sql).JoinWith(x => x.Posts).QueryAsync(); If you instead only wanted to query the first blog with all of its posts, you can again use the QuerySingle API. var blogs = await database.Blogs.QuerySingle().JoinWith(x => x.Posts).QueryAsync(); Warning When joining with multiple relations, ensure that the order of joins configured with Venflow, are equal to the order of joins in the SQL. Queries with parameters Most of the times your query contains some sort of parameters. With Venflow you have two options, either by using the raw NpgsqlParameter class and the matching QuerySingle / QueryBatch overloads or the Interpolated SQL methods. You can learn more about string interpolation in this guide . In this example, we try to query the first blog with the id 5 with all of its posts. FormattableString sql = $@\"SELECT * FROM ( SELECT * FROM \"\"Blogs\"\" WHERE \"\"Id\"\" = {5} LIMIT 1 ) AS \"\"Blogs\"\" JOIN \"\"Posts\"\" ON \"\"Posts\"\".\"\"BlogId\"\" = \"\"Blogs\"\".\"\"Id\"\"\"; var blogs = await database.Blogs.QueryInterpolatedSingle(sql).JoinWith(x => x.Posts).QueryAsync(); Note Most of the methods in Venflow which accept raw SQL do have a sibling method called *Interpolated* . Query partial data The beautiful thing about Venflow is that you can only query for partial data, which means that a query doesn't necessarily has to return all column. There are only two thing you need to be aware of: The primary key always needs to be returned Assuming you have two tables, table A and table B, which you are joining together. Table A isn't allowed to contain a column (other than the primary key) to have the same name as the primary key of table B. Otherwise Venflow won't be able to know when to spilt the SQL result. A simple example of that would be something like the following, where we just query the name and the primary key of all blogs. const string sql = @\"SELECT \"\"Id\"\", \"\"Name\"\" FROM \"\"Blogs\"\"\"; var blogs = await database.Blogs.QueryBatch(sql).QueryAsync(); Queries which don't return entities In Venflow you have the option to construct queries which don't necessarily return a row of a table, in this case you can use the Custom<T> method on your Database class. In the following example we want to return the amount of rows in the Blogs table. public class CountReturn { public int Count { get; set; } } await database.Custom<CountReturn>().QuerySingle(@\"SELECT COUNT(*) FROM \"\"Blogs\"\"\").QueryAsync(); Warning This API does not support any of the usual methods available on regular entities, such as change tracking or joins. Dynamic SQL queries There might be situations in which you need to dynamically generate SQL with parameters, in which case the common StringBuilder isn't sufficient enough. Venflow provides you with the FormattableSqlStringBuilder class which acts like a StringBuilder , however it provides methods, which allow for interpolated SQL. Lets take a look at this with a more practical example. public Task<List<Blogs>> GetBlogsAsync(string[]? names) { var stringBuilder = new FormattableSqlStringBuilder(); stringBuilder.Append(@\"SELECT * FROM \"\"Blogs\"\"\"); if(names is not null && names.Length > 0) { stringBuilder.Append(@\" WHERE \"\"Name\"\" IN (\"); stringBuilder.AppendParameter(names); stringBuilder.AppendInterpolated(@$\") AND LENGTH(\"\"Name\"\") > {5}\"); } return database.Blogs.QueryInterpolatedBatch(stringBuilder).QueryAsync(); } Obviously the query shown above is not too useful, however if names would be provided, it would only query those and additionally they would need to be longer than 5 characters."
  },
  "guides/operations/truncate.html": {
    "href": "guides/operations/truncate.html",
    "title": "Truncate with Venflow | Venflow Documentation",
    "keywords": "Truncate Table with Venflow Your Database class exposes Table<T> properties which expose truncate operations. In Venflow truncates are always automatically. For this example, we want to truncate the Blogs table. await database.Blogs.TruncateAsync();"
  },
  "guides/operations/update.html": {
    "href": "guides/operations/update.html",
    "title": "Update with Venflow | Venflow Documentation",
    "keywords": "Update Data with Venflow Your Database class exposes Table<T> properties which expose update operations. In Venflow updates are always automatically generated. Updates of data happen through change-tracking of entities, however this does not include navigation properties. For this example, we want to update the title of a post. Warning All properties which you want to be updateable by change-tracking have to be marked as virtual! In order to get a change-tracked entity you can choose either of two ways. You can use the TrackChanges method on the query builder to immediately get change tracked entities. var post = await database.Posts.QuerySingle().TrackChanges().QueryAsync(); post.Title = \"This post was updated!\"; await database.Posts.UpdateAsync(post); Or you change track an entity after it was created. var post = new Post { Id = 1 }; database.Posts.TrackChanges(ref post); post.Title = \"This post was updated!\"; await database.Posts.UpdateAsync(post); Note Change tracking is not limited to one Database instance, additionally updating a change tracked entity is thread save. Warning Change tracking won't compare the old value and the new value of a property, this means that if you assign a property, no matter the value, it is considered to be changed."
  },
  "index.html": {
    "href": "index.html",
    "title": "Venflow | Venflow Documentation",
    "keywords": "Venflow Venflow is a brand new ORM, written from the ground up to try and provide an alternative to EF-Core and many other ORMs. It allows you to define Models and their relations with each other. Additionally it maps all queries on its own while still maintaining great performance. About Lets face it, EF-Core is awesome, but it can be slow, really slow. However this library tries to overcome that by providing similar features while maintaining great performance. Venflow comes with a very similar UX to Dapper and EF-Core, in order to keep the learning curve as low as possible. Features Simple change-tracking for update operations Autogenerated Inserts Autogenerated Deletes Autogenerated Query Materializer, Join Generator SQL Injection safe string Interpolated SQL Collaboration The simplest way to do so, is by giving the project a ⭐ and sharing the project to others. How you can help other than that? This can be done in numerous ways, over on the issue section, such as: Creating feature requests Creating pull requests Reporting bugs Installation The pre-release versions of Venflow can currently be downloaded on nuget.org . By now, the project should be fairly stable and safe to use. Also you can install it via the P ackage M anager C onsole: Install-Package Venflow Comparison Benchmarking ORM's isn't an easy task, since there are a bunch of different factors which can alter the result in one way or another. I do not show any beautiful graphs here for the simple reason, that showing them would be pretty impractical, since there would be just too many. That is also the reason why I tried to come up with a composite number based on the benchmark results. If you still want check all the individual benchmarks, which you definitely should, the source code can be found here and the results as .csv and .md are over here . Lets just directly hop into the composite numbers of each tested ORM. <!--Benchmark Start--> ORM Name Composite Score* Mean Score* Allocation Score* #1 Venflow 2.374 1.994 0.381 #2 Dapper 6.547 6.171 0.376 #3 RepoDb 62.006 57.928 4.078 #4 EFCore 219.079 188.615 30.464 <!--Benchmark End--> * Lower is considered to be better ** Do have missing benchmark entries for specific benchmark groups and therefor either might have better/worse scores. Now how do I calculate this magic number ? The formula is as following: compositeScore = Σ((meanTime / lowestMeanTimeOfGroup - 1) + (allocation / lowestAllocationOfGroup - 1) / 10) A group is considered as a list of benchmark entries which are inside the same file and have the same count and target framework. Now as some ORM's don't have any benchmarks entries for specific benchmark groups it will instead take the lowest mean and the lowest allocation from this group. The source code of the calculation can be found here . Disclaimer The benchmarks themselves or even the calculation of the composite numbers may not be right and contain bugs. Therefor consider these results with a grain of salt. If you find any bugs inside the calculations or in the benchmarks please create an issue and I'll try to fix it ASAP. Is this package for you? Especially for ORM's it is becoming a harder challenge than ever before, to choose the right one for you. This project tries to be as transparent as possible, so if any of the following points apply to you or your project, choose a different ORM at least for your current project. You are feeling unsure about writing raw SQL. † You are using a database other than PostgreSQL. † You rely on a code-first implementation. You require Linq2Sql. † indicates that this point might change it the future But why should I use Venflow over EF-Core anyway? Obviously this project is nowhere near as mature as EF-Core and it already covers all your needs. However Venflow is all about performance in all its ways. You might ask yourself now, why would I even care? Well, especially for Web-Apps it really matters! Your response times for all requests involving some sort of Database interaction will immediately decrease. This also means that your application will not take up as much resources on your server. Obviously this only is applicable, if the website encounters somewhat high traffic. But why should I use Venflow over Dapper anyway? Venflow supports a lot more things out of the box, such as automatically generated Delete/Insert statements, as well as simple change tracking to easily update specific entities. Another big factor, which probably is one of the biggest differences to Dapper, are the automatically generated materializers for queries. A lot of the times a materializer generated by Venflow will always be faster, especially for bigger tables, than a hand written Dapper one. This is due to the nature of how Dapper and Venflow handle the parsing of SQL results. Basic usage As already mentioned, Venflow tries to keep the learning curve from other ORM's as low as possible, therefore a lot of patterns will seem familiar to either EFCore or Dapper. Basic configuration The official documentation and guides can be found here In Venflow you are reflecting your PostgreSQL database with the Database class, which will host all of your tables. This class represents a connection to your database and therefor doesn't support multi threaded use. In the following example we will configure a database containing two tables, Blogs and Posts . One Blog contains many posts and a post contains a single Blog. public class BlogDatabase : Database { public Table<Blog> Blogs { get; set; } public Table<Post> Posts { get; set; } public BlogDatabase() : base(\"Your connection string.\") { } } Now lets configure the actual relation between Blogs and Posts through the EntityConfiguration<T> class. In the Configure , method you can configure several things such as the name of the table this entity should map to and much more. These configuration classes do automatically get discovered, if they are in the same assembly as the Database class. If they are not in the same assembly, you can override the Configure method in the Database class which passes in a DatabaseOptionsBuilder , which will allow you to specify assemblies which should also be searched for entity configurations. public class BlogConfiguration : EntityConfiguration<Blog> { protected override void Configure(IEntityBuilder<Blog> entityBuilder) { entityBuilder.HasMany(b => b.Posts) .WithOne(p => p.Blog) .UsingForeignKey(p => p.PostId); } } An instance of your Database class exposes the underlying connection and the actual CRUD builders. In the example below you can see how you would query a set of Blogs with their posts. await using var database = new BlogDatabase(); // You should register a Transient/Scoped your DI Container. const string sql = @\"SELECT * FROM \"\"Blogs\"\" JOIN \"\"Posts\"\" ON \"\"Posts\"\".\"\"BlogId\"\" = \"\"Blogs\"\".\"\"Id\"\"\"; // You can re-use this in different BlogDatabase instances through the database.Blogs.QueryAsync() method // If you intend to reuse the query below you need to pass the QueryBatch method false for the disposeCommand, // otherwise the underyling command will be disposed after the first use. var blogs = database.Blogs.QueryBatch(sql).JoinWith(x => x.Posts).QueryAsync(); Subsequent joins can be configured using the ThenWith method. Do note, that one handy feature of Venflow is string interpolated SQL. This means that most of the methods which accept SQL also have a sibling named *Interpolated* which will automatically extract the used variables and use a parameterized query instead. Road map Composed PK support Direct support for many to many relations Support for materialized Views Bulk operation support from PostgreSQL.Bulk Code-First AOT proxy/entity generation with Source Generators Acknowledgements I also want to mention all the other great packages out there, build by awesome people, which helped with building Venflow in one way or another such as being open-source. Npgsql by the Npgsql core contributers for providing an awesome and fast PostgreSQL data provider. Sharplab by ashmind and the sharplab.io website for immensely simplify the generation for IL. EF-Core by Microsoft and the .Net team for providing the inspiration for such an awesome surface API. RepoDb by mikependon for providing the idea of generating runtime IL/Expressions to boost performance. Fody by the Fody core contributers for providing an easy way to IL weave Venflow. GitHub for hosting the documentation with GitHub Pages and the repository itself. DocFX by Microsoft and the .Net team for providing a great any easy static markdown/documentation html generator. Typora for being a fully extensive and great markdown editor. GitKraken for providing a full fledged git UI with a bunch of great features. Shields for providing awesome badges for the README. Awesome people which helped in the development LunarLite for helping me with highly complex logically issues. AnotherZane for being one of the early preview testers. Jas and Fatal for providing general surface API ideas. Notes Contact information If you feel like something is not working as intended or you are experiencing issues, feel free to create an issue. Also for feature requests just create an issue. For further information feel free to send me an email at office@twenty-four.dev or message me on Discord 24_minutes#7496 . Sponsors I wanna thank JetBrains for providing me and the project with a free Open Source license for their whole JetBrains suite. Their tools greatly improve the development speed of this project. If you want to get a free Open Source license for your own project and their collaborators, visit their Open Source page ."
  }
}