<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Venflow</name>
    </assembly>
    <members>
        <member name="T:Venflow.Commands.IBaseInsertRelationBuilder`2">
            <summary>
            Represents a base insert relation builder to configure the insert.
            </summary>
            <typeparam name="TRelationEntity">The type of the entity which will be joined with.</typeparam>
            <typeparam name="TRootEntity">The root type of the entity.</typeparam>
        </member>
        <member name="M:Venflow.Commands.IBaseInsertRelationBuilder`2.InsertWithAll">
            <summary>
            Allows to configure the current insert, to insert all populated relations which can be reached.
            </summary>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IBaseInsertRelationBuilder`2.InsertWith``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Allows to configure the inserted relations with the current insert.
            </summary>
            <typeparam name="TToEntity">The type of the inserted entity.</typeparam>
            <param name="propertySelector">A lambda expression representing the navigation property which should get inserted with the root entity during insertion.</param>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IBaseInsertRelationBuilder`2.InsertWith``1(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IList{``0}}})">
            <summary>
            Allows to configure the inserted relations with the current insert.
            </summary>
            <typeparam name="TToEntity">The type of the inserted entity.</typeparam>
            <param name="propertySelector">A lambda expression representing the navigation property which should get inserted with the root entity during insertion.</param>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IBaseInsertRelationBuilder`2.InsertWith``1(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.List{``0}}})">
            <summary>
            Allows to configure the inserted relations with the current insert.
            </summary>
            <typeparam name="TToEntity">The type of the inserted entity.</typeparam>
            <param name="propertySelector">A lambda expression representing the navigation property which should get inserted with the root entity during insertion.</param>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="T:Venflow.Commands.IBaseQueryRelationBuilder`3">
            <summary>
            Represents a base query relation builder to configure the query.
            </summary>
            <typeparam name="TRelationEntity">The type of the entity which will be joined with.</typeparam>
            <typeparam name="TRootEntity">The root type of the entity.</typeparam>
            <typeparam name="TReturn">The return type of the query.</typeparam>
        </member>
        <member name="M:Venflow.Commands.IBaseQueryRelationBuilder`3.JoinWith``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},Venflow.Enums.JoinBehaviour)">
            <summary>
            Allows to configure materialized joins for the current query.
            </summary>
            <typeparam name="TToEntity">The type of the joined entity.</typeparam>
            <param name="propertySelector">A lambda expression representing the navigation property which should get joined on doing materialization.</param>
            <param name="joinBehaviour">Configures the type of this join.</param>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IBaseQueryRelationBuilder`3.JoinWith``1(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IList{``0}}},Venflow.Enums.JoinBehaviour)">
            <summary>
            Allows to configure materialized joins for the current query.
            </summary>
            <typeparam name="TToEntity">The type of the joined entity.</typeparam>
            <param name="propertySelector">A lambda expression representing the navigation property which should get joined on doing materialization.</param>
            <param name="joinBehaviour">Configures the type of this join.</param>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IBaseQueryRelationBuilder`3.JoinWith``1(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.List{``0}}},Venflow.Enums.JoinBehaviour)">
            <summary>
            Allows to configure materialized joins for the current query.
            </summary>
            <typeparam name="TToEntity">The type of the joined entity.</typeparam>
            <param name="propertySelector">A lambda expression representing the navigation property which should get joined on doing materialization.</param>
            <param name="joinBehaviour">Configures the type of this join.</param>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="T:Venflow.Commands.IDeleteCommand`1">
            <summary>
            Represents a command which performs deletions of entities.
            </summary>
            <typeparam name="TEntity">The type of the entity which will be deleted.</typeparam>
        </member>
        <member name="M:Venflow.Commands.IDeleteCommand`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a single entity.
            </summary>
            <param name="entity">The entity instance which should be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
        </member>
        <member name="M:Venflow.Commands.IDeleteCommand`1.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a set of entity.
            </summary>
            <param name="entities">The entity instances which should be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
        </member>
        <member name="M:Venflow.Commands.IDeleteCommand`1.DeleteAsync(System.Collections.Generic.IList{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a set of entity.
            </summary>
            <param name="entities">The entity instances which should be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
        </member>
        <member name="M:Venflow.Commands.IDeleteCommand`1.DeleteAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a set of entity.
            </summary>
            <param name="entities">The entity instances which should be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
        </member>
        <member name="M:Venflow.Commands.IDeleteCommand`1.DeleteAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a set of entity.
            </summary>
            <param name="entities">The entity instances which should be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
        </member>
        <member name="T:Venflow.Commands.IDeleteCommandBuilder`1">
            <summary>
            Represents a command builder to configure the deletion.
            </summary>
            <typeparam name="TEntity">The type of the entity which will be deleted.</typeparam>
        </member>
        <member name="M:Venflow.Commands.IDeleteCommandBuilder`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a single entity.
            </summary>
            <param name="entity">The entity instance which should be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
        </member>
        <member name="M:Venflow.Commands.IDeleteCommandBuilder`1.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a set of entity.
            </summary>
            <param name="entities">The entity instances which should be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
        </member>
        <member name="M:Venflow.Commands.IDeleteCommandBuilder`1.DeleteAsync(System.Collections.Generic.IList{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a set of entity.
            </summary>
            <param name="entities">The entity instances which should be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
        </member>
        <member name="M:Venflow.Commands.IDeleteCommandBuilder`1.DeleteAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a set of entity.
            </summary>
            <param name="entities">The entity instances which should be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
        </member>
        <member name="M:Venflow.Commands.IDeleteCommandBuilder`1.DeleteAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a set of entity.
            </summary>
            <param name="entities">The entity instances which should be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
        </member>
        <member name="T:Venflow.Commands.IInsertCommand`1">
            <summary>
            Represents a command which performs insertions of entities.
            </summary>
            <typeparam name="TEntity">The type of the entity which will be inserted.</typeparam>
        </member>
        <member name="M:Venflow.Commands.IInsertCommand`1.InsertAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts a single entity.
            </summary>
            <param name="entity">The entity instance which should be inserted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; 0 otherwise.</returns>
        </member>
        <member name="M:Venflow.Commands.IInsertCommand`1.InsertAsync(System.Collections.Generic.IList{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts a set of entities.
            </summary>
            <param name="entities">The entity instances which should be inserted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; 0 otherwise.</returns>
        </member>
        <member name="T:Venflow.Commands.IInsertCommandBuilder`1">
            <summary>
            Represents a command builder to configure the insertion.
            </summary>
            <typeparam name="TEntity">The type of the entity which will be inserted.</typeparam>
        </member>
        <member name="M:Venflow.Commands.IInsertCommandBuilder`1.InsertAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts a single entity.
            </summary>
            <param name="entity">The entity instance which should be inserted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; 0 otherwise.</returns>
        </member>
        <member name="M:Venflow.Commands.IInsertCommandBuilder`1.InsertAsync(System.Collections.Generic.IList{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts a set of entities.
            </summary>
            <param name="entities">The entity instances which should be inserted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; 0 otherwise.</returns>
        </member>
        <member name="T:Venflow.Commands.IInsertRelationBuilder`2">
            <summary>
            Represents a insert relation builder to configure the insert.
            </summary>
            <typeparam name="TRelationEntity">The type of the entity which will be inserted with.</typeparam>
            <typeparam name="TRootEntity">The root type of the entity.</typeparam>
        </member>
        <member name="M:Venflow.Commands.IInsertRelationBuilder`2.AndWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Allows to configure the inserted relations with the current insert.
            </summary>
            <typeparam name="TToEntity">The type of the inserted entity.</typeparam>
            <param name="propertySelector">A lambda expression representing the navigation property which should get inserted with the root entity during insertion.</param>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IInsertRelationBuilder`2.AndWith``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Allows to configure the inserted relations with the current insert.
            </summary>
            <typeparam name="TToEntity">The type of the inserted entity.</typeparam>
            <param name="propertySelector">A lambda expression representing the navigation property which should get inserted with the root entity during insertion.</param>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IInsertRelationBuilder`2.AndWith``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            Allows to configure the inserted relations with the current insert.
            </summary>
            <typeparam name="TToEntity">The type of the inserted entity.</typeparam>
            <param name="propertySelector">A lambda expression representing the navigation property which should get inserted with the root entity during insertion.</param>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="T:Venflow.Commands.IPreCommandBuilder`2">
            <summary>
            Represents a pre-command builder to configure the query.
            </summary>s
            <typeparam name="TEntity">The type of the entity which will be queried.</typeparam>
            <typeparam name="TReturn">The return type of the query.</typeparam>
        </member>
        <member name="M:Venflow.Commands.IPreCommandBuilder`2.AddFormatter">
            <summary>
            Defines if <b>&gt;&lt;</b> should be replaced by automatically generated joins in your SQL.
            </summary>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="T:Venflow.Commands.IQueryCommand`2">
            <summary>
            Represents a command which performs queries and materialize the results to entities.
            </summary>
            <typeparam name="TEntity">The type of the entity which represents the result of the query.</typeparam>
            <typeparam name="TReturn">The return type of the query.</typeparam>
        </member>
        <member name="M:Venflow.Commands.IQueryCommand`2.PrepareAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously prepares the current SQL command on the database.
            </summary>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
        </member>
        <member name="M:Venflow.Commands.IQueryCommand`2.UnprepareAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously un-prepares the current SQL command on the database.
            </summary>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
        </member>
        <member name="M:Venflow.Commands.IQueryCommand`2.QueryAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs queries and materializes the result.
            </summary>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the materialized result of the query; <see langword="null"/> otherwise.</returns>
        </member>
        <member name="T:Venflow.Commands.IQueryCommandBuilder`2">
            <summary>
            Represents a command builder to configure the query.
            </summary>
            <typeparam name="TEntity">The type of the entity which will be queried.</typeparam>
            <typeparam name="TReturn">The return type of the query.</typeparam>
        </member>
        <member name="M:Venflow.Commands.IQueryCommandBuilder`2.TrackChanges(System.Boolean)">
            <summary>
            Determines whether or not to return change tracked entities from the query.
            </summary>
            <param name="trackChanges">Determines if change tracking should be applied.</param>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IQueryCommandBuilder`2.QueryAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs queries and materializes the result.
            </summary>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation, with the materialized result of the query; <see langword="null"/> otherwise.</returns>
        </member>
        <member name="T:Venflow.Commands.IQueryRelationBuilder`3">
            <summary>
            Represents a query relation builder to configure the query.
            </summary>
            <typeparam name="TRelationEntity">The type of the entity which will be joined with.</typeparam>
            <typeparam name="TRootEntity">The root type of the entity.</typeparam>
            <typeparam name="TReturn">The return type of the query.</typeparam>
        </member>
        <member name="M:Venflow.Commands.IQueryRelationBuilder`3.ThenWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Venflow.Enums.JoinBehaviour)">
            <summary>
            Allows to configure materialized joins for the current query.
            </summary>
            <typeparam name="TToEntity">The type of the joined entity.</typeparam>
            <param name="propertySelector">A lambda expression representing the navigation property which should get joined on doing materialization.</param>
            <param name="joinBehaviour">Configures the type of this join.</param>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IQueryRelationBuilder`3.ThenWith``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},Venflow.Enums.JoinBehaviour)">
            <summary>
            Allows to configure materialized joins for the current query.
            </summary>
            <typeparam name="TToEntity">The type of the joined entity.</typeparam>
            <param name="propertySelector">A lambda expression representing the navigation property which should get joined on doing materialization.</param>
            <param name="joinBehaviour">Configures the type of this join.</param>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IQueryRelationBuilder`3.ThenWith``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}},Venflow.Enums.JoinBehaviour)">
            <summary>
            Allows to configure materialized joins for the current query.
            </summary>
            <typeparam name="TToEntity">The type of the joined entity.</typeparam>
            <param name="propertySelector">A lambda expression representing the navigation property which should get joined on doing materialization.</param>
            <param name="joinBehaviour">Configures the type of this join.</param>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="T:Venflow.Commands.ISpecficVenflowCommandBuilder`1">
            <summary>
            Represents a generic command builder for all CRUD operations to finalize the configuration.
            </summary>
            <typeparam name="TCommand">The type of the command which is being configured.</typeparam>
        </member>
        <member name="M:Venflow.Commands.ISpecficVenflowCommandBuilder`1.Build">
            <summary>
            Finalizes the ongoing configuration process and builds the command.
            </summary>
            <returns>The built command.</returns>
        </member>
        <member name="T:Venflow.Commands.IUpdateCommand`1">
            <summary>
            Represents a command which performs updates of entities.
            </summary>
            <typeparam name="TEntity">The type of the entity which will be updated.</typeparam>
        </member>
        <member name="M:Venflow.Commands.IUpdateCommand`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a single entity.
            </summary>
            <param name="entity">The change tracked entity instance which should be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IUpdateCommand`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a set of entities.
            </summary>
            <param name="entities">The change tracked entity instances which should be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IUpdateCommand`1.UpdateAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a set of entities.
            </summary>
            <param name="entities">The change tracked entity instances which should be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IUpdateCommand`1.UpdateAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a set of entities.
            </summary>
            <param name="entities">The change tracked entity instances which should be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IUpdateCommand`1.UpdateAsync(System.Collections.Generic.IList{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a set of entities.
            </summary>
            <param name="entities">The change tracked entity instances which should be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:Venflow.Commands.IUpdateCommandBuilder`1">
            <summary>
            Represents a command builder to configure the update.
            </summary>
            <typeparam name="TEntity">The type of the entity which will be updated.</typeparam>
        </member>
        <member name="M:Venflow.Commands.IUpdateCommandBuilder`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a single entity.
            </summary>
            <param name="entity">The change tracked entity instance which should be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IUpdateCommandBuilder`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a set of entities.
            </summary>
            <param name="entities">The change tracked entity instances which should be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IUpdateCommandBuilder`1.UpdateAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a set of entities.
            </summary>
            <param name="entities">The change tracked entity instances which should be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IUpdateCommandBuilder`1.UpdateAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a set of entities.
            </summary>
            <param name="entities">The change tracked entity instances which should be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IUpdateCommandBuilder`1.UpdateAsync(System.Collections.Generic.IList{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a set of entities.
            </summary>
            <param name="entities">The change tracked entity instances which should be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:Venflow.Commands.IVenflowCommand`1">
            <summary>
            The base command for all other CRUD commands.
            </summary>
            <typeparam name="TEntity">The type of the entity which is being used in the current operation.</typeparam>
        </member>
        <member name="T:Venflow.Commands.IVenflowCommandBuilder`1">
            <summary>
            Represents a generic command builder to create any CRUD command.
            </summary>
            <typeparam name="TEntity">The type of the entity which will be used for the command.</typeparam>
        </member>
        <member name="M:Venflow.Commands.IVenflowCommandBuilder`1.QuerySingle(System.String)">
            <summary>
            Creates a query command with a single result. <strong>This API does not support string interpolation!</strong> If you need to pass parameters with the query, either use <see cref="M:Venflow.Commands.IVenflowCommandBuilder`1.QuerySingle(System.String,Npgsql.NpgsqlParameter[])"/> or <see cref="M:Venflow.Commands.IVenflowCommandBuilder`1.QueryInterpolatedSingle(System.FormattableString)"/>.
            </summary>
            <returns>An object that can be used to further configure the operation.</returns>
        </member>
        <member name="M:Venflow.Commands.IVenflowCommandBuilder`1.QuerySingle(System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Creates a new query command builder, which expects a single returned primary row. <strong>This API does not support string interpolation!</strong> If you want to pass interpolated SQL use <see cref="M:Venflow.Commands.IVenflowCommandBuilder`1.QueryInterpolatedSingle(System.FormattableString)"/>.
            </summary>
            <param name="sql">A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter.</param>
            <param name="parameters">A set of <see cref="T:Npgsql.NpgsqlParameter"/> which contain parameters for the <paramref name="sql"/> command.</param>
            <returns>A Fluent API Builder for a query command.</returns>
        </member>
        <member name="M:Venflow.Commands.IVenflowCommandBuilder`1.QueryInterpolatedSingle(System.FormattableString)">
            <summary>
            Creates a new query command builder, which expects a single returned primary row. <strong>This API does support string interpolation!</strong>.
            </summary>
            <param name="sql">A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. You should only add parameters trough string interpolation.</param>
            <returns>A Fluent API Builder for a query command.</returns>
        </member>
        <member name="M:Venflow.Commands.IVenflowCommandBuilder`1.QueryBatch(System.String)">
            <summary>
            Creates a new query command builder, which expects a set of primary rows to be returned. <strong>This API does not support string interpolation!</strong> If you need to pass parameters with the query, either use <see cref="M:Venflow.Commands.IVenflowCommandBuilder`1.QuerySingle(System.String,Npgsql.NpgsqlParameter[])"/> or <see cref="M:Venflow.Commands.IVenflowCommandBuilder`1.QueryInterpolatedSingle(System.FormattableString)"/>.
            </summary>
            <param name="sql">A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter.</param>
            <returns>A Fluent API Builder for a query command.</returns>
        </member>
        <member name="M:Venflow.Commands.IVenflowCommandBuilder`1.QueryBatch(System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Creates a new query command builder, which expects a set of primary rows to be returned.<strong>This API does not support string interpolation!</strong> If you want to pass interpolated SQL use <see cref="M:Venflow.Commands.IVenflowCommandBuilder`1.QueryInterpolatedSingle(System.FormattableString)"/>.
            </summary>
            <param name="sql">A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter.</param>
            <param name="parameters">A set of <see cref="T:Npgsql.NpgsqlParameter"/> which contain parameters for the <paramref name="sql"/> command.</param>
            <returns>A Fluent API Builder for a query command.</returns>
        </member>
        <member name="M:Venflow.Commands.IVenflowCommandBuilder`1.QueryInterpolatedBatch(System.FormattableString)">
            <summary>
            Creates a new query command builder, which expects a set of primary rows to be returned. <strong>This API does support string interpolation!</strong>.
            </summary>
            <param name="sql">A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. You should only add parameters trough string interpolation.</param>
            <returns>A Fluent API Builder for a query command.</returns>
        </member>
        <member name="M:Venflow.Commands.IVenflowCommandBuilder`1.Insert">
            <summary>
            Creates a new insert command builder.
            </summary>
            <returns>A Fluent API Builder for a insert command.</returns>
        </member>
        <member name="M:Venflow.Commands.IVenflowCommandBuilder`1.Delete">
            <summary>
            Creates a new delete command builder.
            </summary>
            <returns>A Fluent API Builder for a delete command.</returns>
        </member>
        <member name="M:Venflow.Commands.IVenflowCommandBuilder`1.Update">
            <summary>
            Creates a new update command builder.
            </summary>
            <returns>A Fluent API Builder for a update command.</returns>
        </member>
        <member name="T:Venflow.Database">
            <summary>
            A <see cref="T:Venflow.Database"/> instance represents a session with the database and can be used to perform CRUD operations with your tables and entities.
            </summary>
            <remarks>
            Typically you create a class that derives from <see cref="T:Venflow.Database"/> and contains <seealso cref="T:Venflow.Table`1"/> properties for each entity in the Database. All the <seealso cref="T:Venflow.Table`1"/> properties must have a public setter, they are automatically initialized when the instance of the derived type is created.
            </remarks>
        </member>
        <member name="M:Venflow.Database.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Venflow.Database"/> class using the specified <paramref name="connectionString"/>.
            </summary>
            <param name="connectionString">The connection string to your PostgreSQL Database.</param>
        </member>
        <member name="M:Venflow.Database.ExecuteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command against the current Database. As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments.
            </summary>
            <param name="sql">The SQL to execute.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
            <remarks>This method represents a <see cref="M:Npgsql.NpgsqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)"/> call.</remarks>
        </member>
        <member name="M:Venflow.Database.ExecuteAsync(System.String,System.Collections.Generic.IList{Npgsql.NpgsqlParameter},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command against the current Database. As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments.
            </summary>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The SQL Parameters which are being used for the current command.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
            <remarks>This method represents a <see cref="M:Npgsql.NpgsqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)"/> call.</remarks>
        </member>
        <member name="M:Venflow.Database.ExecuteAsync(System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Asynchronously executes a command against the current Database. As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments.
            </summary>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The SQL Parameters which are being used for the current command.</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
            <remarks>This method represents a <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync"/> call.</remarks>
        </member>
        <member name="M:Venflow.Database.ExecuteInterpolatedAsync(System.FormattableString,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command against the current Database. This method does automatically parameterize queries from an interpolated string.
            </summary>
            <param name="sql">The interpolated SQL to execute.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
            <remarks>This method represents a <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync"/> call.</remarks>
        </member>
        <member name="M:Venflow.Database.ExecuteAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command against the current Database. As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments.
            </summary>
            <typeparam name="T">The type of the scalar result.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the value of the scalar command.</returns>
            <remarks>This method represents a <see cref="M:Npgsql.NpgsqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)"/> call.</remarks>
        </member>
        <member name="M:Venflow.Database.ExecuteAsync``1(System.String,System.Collections.Generic.IList{Npgsql.NpgsqlParameter},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command against the current Database. As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments.
            </summary>
            <typeparam name="T">The type of the scalar result.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The SQL Parameters which are being used for the current command.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the value of the scalar command.</returns>
            <remarks>This method represents a <see cref="M:Npgsql.NpgsqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)"/> call.</remarks>
        </member>
        <member name="M:Venflow.Database.ExecuteAsync``1(System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Asynchronously executes a command against the current Database. As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments.
            </summary>
            <typeparam name="T">The type of the scalar result.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The SQL Parameters which are being used for the current command.</param>
            <returns>A task representing the asynchronous operation, with the value of the scalar command.</returns>
            <remarks>This method represents a <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync"/> call.</remarks>
        </member>
        <member name="M:Venflow.Database.ExecuteInterpolatedAsync``1(System.FormattableString,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a command against the current Database. This method does automatically parameterize queries from an interpolated string.
            </summary>
            <typeparam name="T">The type of the scalar result.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the value of the scalar command.</returns>
            <remarks>This method represents a <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync"/> call.</remarks>
        </member>
        <member name="M:Venflow.Database.Custom``1">
            <summary>
            Allows for queries against an entity which isn't usually defined, this is usually an entity which hasn't got a table in your database.
            </summary>
            <returns>A <see cref="T:Venflow.TableBase`1"/> instance from which queries can be executed.</returns>
            <remarks>The <typeparamref name="TEntity"/> should always be used with this <see cref="T:Venflow.Database"/> instance, otherwise the model has to be generated multiple times.</remarks>
        </member>
        <member name="M:Venflow.Database.GetConnection">
            <summary>
            Gets or creates a new connections, if none got created yet.
            </summary>
            <returns>the <see cref="T:Npgsql.NpgsqlConnection"/>.</returns>
        </member>
        <member name="M:Venflow.Database.Configure(Venflow.DatabaseOptionsBuilder)">
            <summary>
            Allows for further configuration of the <see cref="T:Venflow.Database"/>.
            </summary>
            <param name="optionsBuilder">A builder instance used to further configure the <see cref="T:Venflow.Database"/>.</param>
        </member>
        <member name="M:Venflow.Database.DisposeAsync">
            <summary>
            Releases the allocated resources for this context. Also closes the underlying connection, if open.
            </summary>
            <returns>A value task representing the asynchronous operation</returns>
        </member>
        <member name="M:Venflow.Database.Dispose">
            <summary>
            Releases the allocated resources for this context. Also closes the underlying connection, if open.
            </summary>
            <remarks>If you are in an asynchronous context you should consider using <see cref="M:Venflow.Database.DisposeAsync"/> instead.</remarks>
        </member>
        <member name="T:Venflow.DatabaseOptionsBuilder">
            <summary>
            Provides an option builder to further configure a <see cref="T:Venflow.Database"/> instance.
            </summary>
        </member>
        <member name="M:Venflow.DatabaseOptionsBuilder.AddConfigurations``1">
            <summary>
            Adds the assembly of the type <typeparamref name="T"/> to the <see cref="T:Venflow.Modeling.Definitions.EntityConfiguration`1"/> lookup list.
            </summary>
            <typeparam name="T">The type of which the assembly should be added to the lookup list.</typeparam>
        </member>
        <member name="M:Venflow.DatabaseOptionsBuilder.AddConfigurations(System.Reflection.Assembly)">
             <summary>
             Adds the assembly to the <see cref="T:Venflow.Modeling.Definitions.EntityConfiguration`1"/> lookup list.
             </summary>
            <param name="assembly">The assembly which should be added to the lookup list.</param>
        </member>
        <member name="M:Venflow.DatabaseOptionsBuilder.AddConfigurations(System.Reflection.Assembly[])">
             <summary>
             Adds the assemblies to the <see cref="T:Venflow.Modeling.Definitions.EntityConfiguration`1"/> lookup list.
             </summary>
            <param name="assemblies">The assemblies which should be added to the lookup list.</param>
        </member>
        <member name="T:Venflow.Enums.ForeignTruncateOptions">
            <summary>
            Represents the truncate option for foreign keys.
            </summary>
        </member>
        <member name="F:Venflow.Enums.ForeignTruncateOptions.None">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="F:Venflow.Enums.ForeignTruncateOptions.Cascade">
            <summary>
            Automatically truncate all tables that have foreign-key references to any of the named tables, or to any tables added to the group due to CASCADE.
            </summary>
        </member>
        <member name="F:Venflow.Enums.ForeignTruncateOptions.Restrict">
            <summary>
            Refuse to truncate if any of the tables have foreign-key references from tables that are not listed in the command. This is the default.
            </summary>
        </member>
        <member name="T:Venflow.Enums.IdentityTruncateOptions">
            <summary>
            Represents the identity truncate option for foreign keys.
            </summary>
        </member>
        <member name="F:Venflow.Enums.IdentityTruncateOptions.None">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="F:Venflow.Enums.IdentityTruncateOptions.Restart">
            <summary>
            Automatically restart sequences owned by columns of the truncated table(s).
            </summary>
        </member>
        <member name="F:Venflow.Enums.IdentityTruncateOptions.Continue">
            <summary>
            Do not change the values of sequences. This is the default.
            </summary>
        </member>
        <member name="T:Venflow.Enums.JoinBehaviour">
            <summary>
            Specifies the behaviour for a specific join between two tables.
            </summary>
        </member>
        <member name="F:Venflow.Enums.JoinBehaviour.InnerJoin">
            <summary>
            Returns records that have matching values in both tables
            </summary>
        </member>
        <member name="F:Venflow.Enums.JoinBehaviour.LeftJoin">
            <summary>
            Returns all records from the left table, and the matched records from the right table
            </summary>
        </member>
        <member name="F:Venflow.Enums.JoinBehaviour.RightJoin">
            <summary>
            Returns all records from the right table, and the matched records from the left table
            </summary>
        </member>
        <member name="F:Venflow.Enums.JoinBehaviour.FullJoin">
            <summary>
            Returns all records when there is a match in either left or right table
            </summary>
        </member>
        <member name="T:Venflow.InvalidEntityRelationException">
            <summary>
            Represents errors that occur during the relation entity generation.
            </summary>
        </member>
        <member name="M:Venflow.InvalidEntityRelationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Venflow.InvalidEntityRelationException"/> class.
            </summary>
        </member>
        <member name="M:Venflow.InvalidEntityRelationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Venflow.InvalidEntityRelationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Venflow.InvalidEntityRelationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Venflow.InvalidEntityRelationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Venflow.InvalidEntityRelationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Venflow.InvalidEntityRelationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or System.Exception.HResult is zero (0).</exception>
        </member>
        <member name="T:Venflow.IParameterTypeHandler">
            <summary>
            A parameter type handler which can be used with the <see cref="M:Venflow.ParameterTypeHandler.AddTypeHandler(System.Type,Venflow.IParameterTypeHandler)"/> method.
            </summary>
        </member>
        <member name="M:Venflow.IParameterTypeHandler.Handle(System.String,System.Object)">
            <summary>
            Is used to convert the given value and name to an <see cref="T:Npgsql.NpgsqlParameter"/>.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="val">The value of the parameter.</param>
            <returns>The <see cref="T:Npgsql.NpgsqlParameter"/> containing the name and the value.</returns>
        </member>
        <member name="T:Venflow.Modeling.Definitions.Builder.IEntityBuilder`1">
            <summary>
            Instances of this class are returned from methods inside the <see cref="T:Venflow.Table`1"/> class when using the Fluid API and it is not designed to be directly constructed in your application code.
            </summary>
            <typeparam name="TEntity">The entity type being configured.</typeparam>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.IEntityBuilder`1.MapToTable(System.String)">
            <summary>
            Configures the table that the entity type maps to, if not configured it will use the name of the <see cref="T:Venflow.Table`1"/> property inside the <see cref="T:Venflow.Database"/> class.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.IEntityBuilder`1.MapColumn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Configures the column that the property maps to, if not configured it will use the name of the property inside the entity.
            </summary>
            <typeparam name="TTarget">The type of the property.</typeparam>
            <param name="propertySelector">A lambda expression representing the property on this entity type.</param>
            <param name="columnName">The name of the column in the database to which the used property should map to.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.IEntityBuilder`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Ignores a property for this entity type. This is the Fluent API equivalent to the <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute"/>.
            </summary>
            <typeparam name="TTarget">The type of the property.</typeparam>
            <param name="propertySelector">A lambda expression representing the property on this entity type.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.IEntityBuilder`1.MapId``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)">
            <summary>
            Sets the property that defines the primary key for this entity type. This is the Fluent API equivalent to the <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute"/>.
            </summary>
            <typeparam name="TTarget">The type of the primary key.</typeparam>
            <param name="propertySelector">A lambda expression representing the primary key on this entity type.</param>
            <param name="option">The option which define how the primary key is generate.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.IEntityBuilder`1.MapPostgresEnum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,Npgsql.INpgsqlNameTranslator)">
            <summary>
            Maps a PostgreSQL enum to a CLR enum.
            </summary>
            <typeparam name="TTarget">The type of the enum.</typeparam>
            <param name="propertySelector">A lambda expression representing the enum which should be mapped on this entity type.</param>
            <param name="name">The name of the enum in PostgreSQL, if none used it will try to convert the name of the CLR enum e.g. 'FooBar' to 'foo_bar'</param>
            <param name="npgsqlNameTranslator">A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to <see cref="T:Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator"/>.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.IEntityBuilder`1.MapPostgresEnum``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String,Npgsql.INpgsqlNameTranslator)">
            <summary>
            Maps a PostgreSQL enum to a CLR enum.
            </summary>
            <typeparam name="TTarget">The type of the enum.</typeparam>
            <param name="propertySelector">A lambda expression representing the enum which should be mapped on this entity type.</param>
            <param name="name">The name of the enum in PostgreSQL, if none used it will try to convert the name of the CLR enum e.g. 'FooBar' to 'foo_bar'</param>
            <param name="npgsqlNameTranslator">A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to <see cref="T:Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator"/>.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Venflow.Modeling.Definitions.Builder.IForeignKeyRelationBuilder`2">
            <summary>
            This interface hosts relation methods for the foreign key configurations.
            </summary>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.IForeignKeyRelationBuilder`2.UsingForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures the property to be used as the foreign key for this relationship.
            </summary>
            <typeparam name="TKey">The type of the foreign key.</typeparam>
            <param name="navigationProperty">A lambda expression representing the foreign key property (post => post.BlogId).</param>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.IForeignKeyRelationBuilder`2.UsingForeignKey``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Configures the property to be used as the foreign key for this relationship.
            </summary>
            <typeparam name="TKey">The type of the foreign key.</typeparam>
            <param name="navigationProperty">A lambda expression representing the foreign key property (post => post.BlogId).</param>
        </member>
        <member name="T:Venflow.Modeling.Definitions.Builder.ILeftRelationBuilder`1">
            <summary>
            This interface hosts relation methods for the left side of a relation.
            </summary>
            <typeparam name="TEntity">The entity type being configured.</typeparam>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.ILeftRelationBuilder`1.HasOne``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            <para>
                Configures a relationship where this entity type has a reference that points to a single instance of the other type in the relationship.
            </para>
            <para>
                Note that calling this method with no parameters will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified.
            </para>
            <para>
                After calling this method, you should chain a call to <see cref="M:Venflow.Modeling.Definitions.Builder.INotRequiredMultiRightRelationBuilder`2.WithMany"/> or <see cref="M:Venflow.Modeling.Definitions.Builder.INotRequiredSingleRightRelationBuilder`2.WithOne"/> to fully configure the relationship. Calling just this method without the chained call will not produce a valid relationship.
            </para>
            </summary>
            <typeparam name="TRelation">The entity type that this relationship targets.</typeparam>
            <param name="navigationProperty">A lambda expression representing the reference navigation property on this entity type that represents the relationship (post => post.Blog). If no property is specified, the relationship will be configured without a navigation property on this end.</param>
            <returns>An object that can be used to configure the relationship.</returns>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.ILeftRelationBuilder`1.HasOne``1">
            <summary>
            <para>
                Configures a relationship where this entity type has a reference that points to a single instance of the other type in the relationship.
            </para>
            <para>
                Note that calling this method will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified.
            </para>
            <para>
                After calling this method, you should chain a call to <see cref="M:Venflow.Modeling.Definitions.Builder.IMultiRightRelationBuilder`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IList{`0}}})"/> or <see cref="M:Venflow.Modeling.Definitions.Builder.IRequiredSingleRightRelationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})"/> to fully configure the relationship. Calling just this method without the chained call will not produce a valid relationship.
            </para>
            </summary>
            <typeparam name="TRelation">The entity type that this relationship targets.</typeparam>
            <returns>An object that can be used to configure the relationship.</returns>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.ILeftRelationBuilder`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            <para>
                Configures a relationship where this entity type has a collection that contains instances of the other type in the relationship.
            </para>
            <para>
                Note that calling this method with no parameters will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified.
            </para>
            <para>
                After calling this method, you should chain a call to <see cref="M:Venflow.Modeling.Definitions.Builder.INotRequiredSingleRightRelationBuilder`2.WithOne"/> to fully configure the relationship. Calling just this method without the chained call will not produce a valid relationship.
            </para>
            </summary>
            <typeparam name="TRelation">The entity type that this relationship targets.</typeparam>
            <returns>An object that can be used to configure the relationship.</returns>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.ILeftRelationBuilder`1.HasMany``1">
            <summary>
            <para>
                Configures a relationship where this entity type has a collection that contains instances of the other type in the relationship.
            </para>
            <para>
                Note that calling this method will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified.
            </para>
            <para>
                After calling this method, you should chain a call to <see cref="M:Venflow.Modeling.Definitions.Builder.IRequiredSingleRightRelationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})"/> to fully configure the relationship. Calling just this method without the chained call will not produce a valid relationship.
            </para>
            </summary>
            <typeparam name="TRelation">The entity type that this relationship targets.</typeparam>
            <returns>An object that can be used to configure the relationship.</returns>
        </member>
        <member name="T:Venflow.Modeling.Definitions.Builder.IMultiRightRelationBuilder`2">
            <summary>
            summary>
            Instances of this class are returned from methods inside the <see cref="T:Venflow.Table`1"/> class when using the Fluid API and it is not designed to be directly constructed in your application code.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TRelation">The entity type that this relationship targets.</typeparam>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.IMultiRightRelationBuilder`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IList{`0}}})">
            <summary>
            <para>
                Configures this as a one-to-many relationship.
            </para>
            <para>
                Note that calling this method with no parameters will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified.
            </para>
            </summary>
            <param name="navigationProperty"> A lambda expression representing the collection navigation property on the other end of this relationship (blog => blog.Posts). If no property is specified, the relationship will be configured without a navigation property on the other end of the relationship.</param>
            <returns>An object that can be used to configure the relationship.</returns>
        </member>
        <member name="T:Venflow.Modeling.Definitions.Builder.INotRequiredMultiRightRelationBuilder`2">
            <summary>
            This interface hosts relation methods for the right side of a relation.
            </summary>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.INotRequiredMultiRightRelationBuilder`2.WithMany">
            <summary>
            <para>
                Configures this as a one-to-many relationship.
            </para>
            <para>
                Note that calling this method will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified.
            </para>
            </summary>
            <returns>An object that can be used to configure the relationship.</returns>
        </member>
        <member name="T:Venflow.Modeling.Definitions.Builder.INotRequiredSingleRightRelationBuilder`2">
            <summary>
            This interface hosts relation methods for the right side of a relation.
            </summary>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.INotRequiredSingleRightRelationBuilder`2.WithOne">
            <summary>
            <para>
                Configures this as a one-to-one relationship.
            </para>
            <para>
                Note that calling this method will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified.
            </para>
            </summary>
            <returns>An object that can be used to configure the relationship.</returns>
        </member>
        <member name="T:Venflow.Modeling.Definitions.Builder.IRequiredMultiRightRelationBuilder`2">
            <summary>
            This interface hosts relation methods for the right side of a relation.
            </summary>
        </member>
        <member name="T:Venflow.Modeling.Definitions.Builder.IRequiredSingleRightRelationBuilder`2">
            <summary>
            This interface hosts relation methods for the right side of a relation.
            </summary>
        </member>
        <member name="M:Venflow.Modeling.Definitions.Builder.IRequiredSingleRightRelationBuilder`2.WithOne(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
            <summary>
            <para>
                Configures this as a one-to-one relationship.
            </para>
            <para>
                Note that calling this method with no parameters will explicitly configure this side of the relationship to use no navigation property, even if such a property exists on the entity type. If the navigation property is to be used, then it must be specified.
            </para>
            </summary>
            <param name="navigationProperty">A lambda expression representing the reference navigation property on the other end of this relationship (blog => blog.BlogInfo). If no property is specified, the relationship will be configured without a navigation property on the other end of the relationship.</param>
            <returns>An object that can be used to configure the relationship.</returns>
        </member>
        <member name="T:Venflow.Modeling.Definitions.EntityConfiguration`1">
            <summary>
            Allows configuration for an entity type. Inherit from this class and override the <see cref="M:Venflow.Modeling.Definitions.EntityConfiguration`1.Configure(Venflow.Modeling.Definitions.Builder.IEntityBuilder{`0})"/> method to configure the entity <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The entity to be configured.</typeparam>
            <remarks>Classes which inherit from this one, have to be in the same assembly as the <see cref="T:Venflow.Database"/> in order to be discoverable.</remarks>
        </member>
        <member name="M:Venflow.Modeling.Definitions.EntityConfiguration`1.Configure(Venflow.Modeling.Definitions.Builder.IEntityBuilder{`0})">
            <summary>
            Allows for configuration of the entity <typeparamref name="TEntity"/>.
            </summary>
            <param name="entityBuilder">The builder used to configure the entity.</param>
        </member>
        <member name="T:Venflow.Modeling.Definitions.EntityConfiguration">
            <summary>
            <strong>This is a class which is only used for type safety, do not inherit!</strong>
            </summary>
        </member>
        <member name="T:Venflow.NpgsqlCommandExtensions">
            <summary>
            Provides a set of useful extension methods for the <see cref="T:Npgsql.NpgsqlCommand"/> class.
            </summary>
        </member>
        <member name="M:Venflow.NpgsqlCommandExtensions.AddParamter``1(Npgsql.NpgsqlCommand,System.String,``0)">
            <summary>
            Adds a new Parameter to the <see cref="P:Npgsql.NpgsqlCommand.Parameters"/> collection.
            </summary>
            <typeparam name="TType">The value type of the Parameter.</typeparam>
            <param name="command">The command to which the Parameter should be added.</param>
            <param name="parameterName">The name of the Parameter.</param>
            <param name="value">The value of the Parameter.</param>
            <returns>the just created <see cref="T:Npgsql.NpgsqlParameter`1"/>.</returns>
        </member>
        <member name="M:Venflow.NpgsqlCommandExtensions.SetInterpolatedCommandText(Npgsql.NpgsqlCommand,System.FormattableString)">
            <summary>
            Sets the command text of the used <see cref="T:Npgsql.NpgsqlCommand"/>. <strong>This API does support string interpolation!</strong>
            </summary>
            <param name="command">The command of which the command text should be set. Ensure that you do not pass any user manipulated SQL for this parameter. You should only add parameters trough string interpolation.</param>
            <param name="sql">A string containing the SQL statement.</param>
        </member>
        <member name="T:Venflow.ParameterTypeHandler">
            <summary>
            A class which contains methods to configure the used type handlers while parsing Interpolated arguments.
            </summary>
        </member>
        <member name="M:Venflow.ParameterTypeHandler.AddTypeHandler(System.Type,Venflow.IParameterTypeHandler)">
            <summary>
            Adds a type handler.
            </summary>
            <param name="type">The type to which the type handler should be mapped.</param>
            <param name="typeHandler">The type handler.</param>
        </member>
        <member name="T:Venflow.Table`1">
            <summary>
            A <see cref="T:Venflow.Table`1"/> is used to perform CRUD operations against the table represented by <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The entity which represents a table in the Database.</typeparam>
        </member>
        <member name="M:Venflow.Table`1.TruncateAsync(Venflow.Enums.ForeignTruncateOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously truncates the current table with the provided options.
            </summary>
            <param name="foreignOptions">Specifies how the truncate operation should handle foreign tables.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>This method represents the following SQL statement "TRUNCATE table [CASCADE|RESTRICT|NONE]".</remarks>
        </member>
        <member name="M:Venflow.Table`1.TruncateAsync(Venflow.Enums.IdentityTruncateOptions,Venflow.Enums.ForeignTruncateOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously truncates the current table with the provided options.
            </summary>
            <param name="truncateOptions">Specifies how the truncate operation should handle identities in the table.</param>
            <param name="foreignOptions">Specifies how the truncate operation should handle foreign tables.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>This method represents the following SQL statement "TRUNCATE table [RESTART IDENTITY|CONTINUE IDENTITY|NONE] [CASCADE|RESTRICT|NONE]".</remarks>
        </member>
        <member name="M:Venflow.Table`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously counts the total rows the current table.
            </summary>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the number of rows.</returns>
            <remarks>This method represents the following SQL statement "SELECT COUNT(*) FROM table".</remarks>
        </member>
        <member name="M:Venflow.Table`1.InsertAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts the entity and all entities reachable from the current provided instance into the current table.
            </summary>
            <param name="entity">A <typeparamref name="TEntity"/> instance representing the row, which will be inserted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the number of rows inserted.</returns>
            <remarks>This method represents the following SQL statement "INSERT INTO table (foo, bar) VALUES ('foo', 'bar')". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.InsertAsync(Venflow.Commands.IInsertCommand{`0},`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts the entity and all entities reachable from the current provided instance into the current table.
            </summary>
            <param name="insertCommand">A <see cref="T:Venflow.Commands.IInsertCommand`1"/> instance which contains all the settings for this operation.</param>
            <param name="entity">A <typeparamref name="TEntity"/> instance representing the row, which will be inserted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the number of rows inserted.</returns>
            <remarks>This method represents the following SQL statement "INSERT INTO table (foo, bar) VALUES ('foo', 'bar')". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.InsertAsync(System.Collections.Generic.IList{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts a list of entities and all entities reachable from the current provided instances into the current table.
            </summary>
            <param name="entities">A list of <typeparamref name="TEntity"/> instance representing the rows, which will be inserted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the number of rows inserted.</returns>
            <remarks>This method represents the following SQL statement "INSERT INTO table (foo, bar) VALUES ('foo', 'bar'), ('foo', 'bar')". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.InsertAsync(Venflow.Commands.IInsertCommand{`0},System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts a list of entities and all entities reachable from the current provided instances into the current table.
            </summary>
            <param name="insertCommand">A <see cref="T:Venflow.Commands.IInsertCommand`1"/> instance which contains all the settings for this operation.</param>
            <param name="entities">A list of <typeparamref name="TEntity"/> instance representing the rows, which will be inserted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the number of rows inserted.</returns>
            <remarks>This method represents the following SQL statement "INSERT INTO table (foo, bar) VALUES ('foo', 'bar'), ('foo', 'bar')". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes the provided entity by its defined primary key.
            </summary>
            <param name="entity">A <typeparamref name="TEntity"/> instance representing the row, which will be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the number of rows deleted.</returns>
            <remarks>This method represents the following SQL statement "DELETE FROM table WHERE pk = 0". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.DeleteAsync(Venflow.Commands.IDeleteCommand{`0},`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes the provided entity by its defined primary key.
            </summary>
            <param name="deleteCommand">A <see cref="T:Venflow.Commands.IDeleteCommand`1"/> instance which contains all the settings for this operation.</param>
            <param name="entity">A <typeparamref name="TEntity"/> instance representing the row, which will be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the number of rows deleted.</returns>
            <remarks>This method represents the following SQL statement "DELETE FROM table WHERE pk = 0". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.DeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes the provided entities by their defined primary keys.
            </summary>
            <param name="entities">A set of <typeparamref name="TEntity"/> instances representing the rows, which will be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the number of rows deleted.</returns>
            <remarks>This method represents the following SQL statement "DELETE FROM table WHERE pk = 0". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.DeleteAsync(System.Collections.Generic.IList{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes the provided entities by their defined primary keys.
            </summary>
            <param name="entities">A set of <typeparamref name="TEntity"/> instances representing the rows, which will be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the number of rows deleted.</returns>
            <remarks>This method represents the following SQL statement "DELETE FROM table WHERE pk = 0". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.DeleteAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes the provided entities by their defined primary keys.
            </summary>
            <param name="entities">A set of <typeparamref name="TEntity"/> instances representing the rows, which will be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the number of rows deleted.</returns>
            <remarks>This method represents the following SQL statement "DELETE FROM table WHERE pk = 0". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.DeleteAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes the provided entities by their defined primary keys.
            </summary>
            <param name="entities">A set of <typeparamref name="TEntity"/> instances representing the rows, which will be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the number of rows deleted.</returns>
            <remarks>This method represents the following SQL statement "DELETE FROM table WHERE pk = 0". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.DeleteAsync(Venflow.Commands.IDeleteCommand{`0},System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes the provided entities by their defined primary keys.
            </summary>
            <param name="deleteCommand">A <see cref="T:Venflow.Commands.IDeleteCommand`1"/> instance which contains all the settings for this operation.</param>
            <param name="entities">A set of <typeparamref name="TEntity"/> instances representing the rows, which will be deleted.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the number of rows deleted.</returns>
            <remarks>This method represents the following SQL statement "DELETE FROM table WHERE pk = 0". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates the provided entity by its defined primary keys.
            </summary>
            <param name="entity">A <typeparamref name="TEntity"/> instance representing the row, which will be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>This method represents the following SQL statement "UPDATE table SET foo = 'foo' WHERE pk = 0". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.UpdateAsync(Venflow.Commands.IUpdateCommand{`0},`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates the provided entity by its defined primary keys.
            </summary>
            <param name="updateCommand">A <see cref="T:Venflow.Commands.IUpdateCommand`1"/> instance which contains all the settings for this operation.</param>
            <param name="entity">A <typeparamref name="TEntity"/> instance representing the row, which will be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>This method represents the following SQL statement "UPDATE table SET foo = 'foo' WHERE pk = 0". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates the provided entity by its defined primary keys.
            </summary>
            <param name="entities">A set of <typeparamref name="TEntity"/> instances representing the rows, which will be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>This method represents the following SQL statement "UPDATE table SET foo = 'foo' WHERE pk = 0". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.UpdateAsync(System.Collections.Generic.List{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates the provided entity by its defined primary keys.
            </summary>
            <param name="entities">A set of <typeparamref name="TEntity"/> instances representing the rows, which will be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>This method represents the following SQL statement "UPDATE table SET foo = 'foo' WHERE pk = 0". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.UpdateAsync(System.Collections.Generic.IList{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates the provided entity by its defined primary keys.
            </summary>
            <param name="entities">A set of <typeparamref name="TEntity"/> instances representing the rows, which will be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>This method represents the following SQL statement "UPDATE table SET foo = 'foo' WHERE pk = 0". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.UpdateAsync(`0[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates the provided entity by its defined primary keys.
            </summary>
            <param name="entities">A set of <typeparamref name="TEntity"/> instances representing the rows, which will be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>This method represents the following SQL statement "UPDATE table SET foo = 'foo' WHERE pk = 0". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.UpdateAsync(Venflow.Commands.IUpdateCommand{`0},System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates the provided entity by its defined primary keys.
            </summary>
            <param name="updateCommand">A <see cref="T:Venflow.Commands.IUpdateCommand`1"/> instance which contains all the settings for this operation.</param>
            <param name="entities">A set of <typeparamref name="TEntity"/> instances representing the rows, which will be updated.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>This method represents the following SQL statement "UPDATE table SET foo = 'foo' WHERE pk = 0". This API is using parameterized commands.</remarks>
        </member>
        <member name="M:Venflow.Table`1.Insert">
            <summary>
            Creates a new insert command.
            </summary>
            <returns>A Fluent API Builder for a insert command.</returns>
            <remarks>The command will be automatically disposed the underlying <see cref="T:Npgsql.NpgsqlCommand"/> after the command got executed once.</remarks>
        </member>
        <member name="M:Venflow.Table`1.Insert(System.Boolean)">
            <summary>
            Creates a new insert command.
            </summary>
            <param name="disposeCommand">Indicates whether or not to dispose the underlying <see cref="T:Npgsql.NpgsqlCommand"/> after the command got executed once.</param>
            <returns>A Fluent API Builder for a insert command.</returns>
        </member>
        <member name="M:Venflow.Table`1.Delete">
            <summary>
            Creates a new delete command.
            </summary>
            <returns>A Fluent API Builder for a delete command.</returns>
            <remarks>The command will be automatically disposed the underlying <see cref="T:Npgsql.NpgsqlCommand"/> after the command got executed once.</remarks>
        </member>
        <member name="M:Venflow.Table`1.Delete(System.Boolean)">
            <summary>
            Creates a new delete command.
            </summary>
            <param name="disposeCommand">Indicates whether or not to dispose the underlying <see cref="T:Npgsql.NpgsqlCommand"/> after the command got executed once.</param>
            <returns>A Fluent API Builder for a delete command.</returns>
        </member>
        <member name="M:Venflow.Table`1.Update">
            <summary>
            Creates a new update command.
            </summary>
            <returns>A Fluent API Builder for a update command.</returns>
        </member>
        <member name="M:Venflow.Table`1.Update(System.Boolean)">
            <summary>
            Creates a new update command.
            </summary>
            <param name="disposeCommand">Indicates whether or not to dispose the underlying <see cref="T:Npgsql.NpgsqlCommand"/> after the command got executed once.</param>
            <returns>A Fluent API Builder for a update command.</returns>
        </member>
        <member name="M:Venflow.Table`1.TrackChanges(`0@)">
            <summary>
            Starts tracking the provided <typeparamref name="TEntity"/>.
            </summary>
            <param name="entity">A <typeparamref name="TEntity"/> instance which will be change tracked.</param>
            <remarks>Any property which should be change tracked on an entity has to be marked virtual.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the provided entity does not contain any virtual properties.</exception>
        </member>
        <member name="M:Venflow.Table`1.TrackChanges(System.Collections.Generic.IList{`0})">
            <summary>
            Starts tracking the provided <typeparamref name="TEntity"/>'s.
            </summary>
            <param name="entities">A set of <typeparamref name="TEntity"/> instances which will be change tracked.</param>
            <remarks>This method represents the following SQL statement "UPDATE table SET foo = 'foo' WHERE pk = 0". This API is using parameterized commands.</remarks>
            <remarks>Any property which should be change tracked on an entity has to be marked virtual.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when a provided entity does not contain any virtual properties.</exception>
        </member>
        <member name="T:Venflow.TableBase`1">
            <summary>
            A <see cref="T:Venflow.TableBase`1"/> is used to perform query operations of all sorts.
            </summary>
            <typeparam name="TEntity">The entity which represents a table in the Database.</typeparam>
        </member>
        <member name="M:Venflow.TableBase`1.QueryAsync``1(Venflow.Commands.IQueryCommand{`0,``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously queries one or more entities with the configured joins.
            </summary>
            <param name="queryCommand">A <see cref="T:Venflow.Commands.IQueryCommand`2"/> instance representing the query which will be performed.</param>
            <param name="cancellationToken">The cancellation token, which is used to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the result of the executed query.</returns>
            <remarks>This method could represents the following SQL statement "SELECT * FROM table".</remarks>
        </member>
        <member name="M:Venflow.TableBase`1.QuerySingle(System.String,System.Boolean)">
            <summary>
            Creates a new query command, which expects a single returned primary row. <strong>This API does not support string interpolation!</strong> If you need to pass parameters with the query, either use <see cref="M:Venflow.TableBase`1.QuerySingle(System.String,Npgsql.NpgsqlParameter[])"/> or <see cref="M:Venflow.TableBase`1.QueryInterpolatedSingle(System.FormattableString,System.Boolean)"/>.
            </summary>
            <param name="sql">A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter.</param>
            <param name="disposeCommand">Indicates whether or not to dispose the underlying <see cref="T:Npgsql.NpgsqlCommand"/> after the command got executed once.</param>
            <returns>A Fluent API Builder for a query command.</returns>
        </member>
        <member name="M:Venflow.TableBase`1.QuerySingle(System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Creates a new query command, which expects a single returned primary row. <strong>This API does not support string interpolation!</strong> If you want to pass interpolated SQL use <see cref="M:Venflow.TableBase`1.QueryInterpolatedSingle(System.FormattableString,System.Boolean)"/>.
            </summary>
            <param name="sql">A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter.</param>
            <param name="parameters">A set of <see cref="T:Npgsql.NpgsqlParameter"/> which contain parameters for the <paramref name="sql"/> command.</param>
            <returns>A Fluent API Builder for a query command.</returns>
            <remarks>The command will be automatically disposed the underlying <see cref="T:Npgsql.NpgsqlCommand"/> after the command got executed once.</remarks>
        </member>
        <member name="M:Venflow.TableBase`1.QuerySingle(System.String,System.Boolean,Npgsql.NpgsqlParameter[])">
            <summary>
            Creates a new query command, which expects a single returned primary row. <strong>This API does not support string interpolation!</strong> If you want to pass interpolated SQL use <see cref="M:Venflow.TableBase`1.QueryInterpolatedSingle(System.FormattableString,System.Boolean)"/>.
            </summary>
            <param name="sql">A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter.</param>
            <param name="disposeCommand">Indicates whether or not to dispose the underlying <see cref="T:Npgsql.NpgsqlCommand"/> after the command got executed once.</param>
            <param name="parameters">A set of <see cref="T:Npgsql.NpgsqlParameter"/> which contain parameters for the <paramref name="sql"/> command.</param>
            <returns>A Fluent API Builder for a query command.</returns>
        </member>
        <member name="M:Venflow.TableBase`1.QueryInterpolatedSingle(System.FormattableString,System.Boolean)">
            <summary>
            Creates a new query command, which expects a single returned primary row. <strong>This API does support string interpolation!</strong>.
            </summary>
            <param name="sql">A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. You should only add parameters trough string interpolation.</param>
            <param name="disposeCommand">Indicates whether or not to dispose the underlying <see cref="T:Npgsql.NpgsqlCommand"/> after the command got executed once.</param>
            <returns>A Fluent API Builder for a query command.</returns>
        </member>
        <member name="M:Venflow.TableBase`1.QueryBatch(System.String,System.Boolean)">
            <summary>
            Creates a new query command, which expects a set of primary rows to be returned. <strong>This API does not support string interpolation!</strong> If you need to pass parameters with the query, either use <see cref="M:Venflow.TableBase`1.QuerySingle(System.String,Npgsql.NpgsqlParameter[])"/> or <see cref="M:Venflow.TableBase`1.QueryInterpolatedSingle(System.FormattableString,System.Boolean)"/>.
            </summary>
            <param name="sql">A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter.</param>
            <param name="disposeCommand">Indicates whether or not to dispose the underlying <see cref="T:Npgsql.NpgsqlCommand"/> after the command got executed once.</param>
            <returns>A Fluent API Builder for a query command.</returns>
        </member>
        <member name="M:Venflow.TableBase`1.QueryBatch(System.String,Npgsql.NpgsqlParameter[])">
            <summary>
            Creates a new query command, which expects a set of primary rows to be returned.<strong>This API does not support string interpolation!</strong> If you want to pass interpolated SQL use <see cref="M:Venflow.TableBase`1.QueryInterpolatedSingle(System.FormattableString,System.Boolean)"/>.
            </summary>
            <param name="sql">A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter.</param>
            <param name="parameters">A set of <see cref="T:Npgsql.NpgsqlParameter"/> which contain parameters for the <paramref name="sql"/> command.</param>
            <returns>A Fluent API Builder for a query command.</returns>
            <remarks>The command will be automatically disposed the underlying <see cref="T:Npgsql.NpgsqlCommand"/> after the command got executed once.</remarks>
        </member>
        <member name="M:Venflow.TableBase`1.QueryBatch(System.String,System.Boolean,Npgsql.NpgsqlParameter[])">
            <summary>
            Creates a new query command, which expects a set of primary rows to be returned. <strong>This API does not support string interpolation!</strong> If you want to pass interpolated SQL use <see cref="M:Venflow.TableBase`1.QueryInterpolatedSingle(System.FormattableString,System.Boolean)"/>.
            </summary>
            <param name="sql">A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter.</param>
            <param name="disposeCommand">Indicates whether or not to dispose the underlying <see cref="T:Npgsql.NpgsqlCommand"/> after the command got executed once.</param>
            <param name="parameters">A set of <see cref="T:Npgsql.NpgsqlParameter"/> which contain parameters for the <paramref name="sql"/> command.</param>
            <returns>A Fluent API Builder for a query command.</returns>
        </member>
        <member name="M:Venflow.TableBase`1.QueryInterpolatedBatch(System.FormattableString,System.Boolean)">
            <summary>
            Creates a new query command, which expects a set of primary rows to be returned. <strong>This API does support string interpolation!</strong>.
            </summary>
            <param name="sql">A string containing the SQL statement. Ensure that you do not pass any user manipulated SQL for this parameter. <strong>You should only add parameters trough string interpolation.</strong></param>
            <param name="disposeCommand">Indicates whether or not to dispose the underlying <see cref="T:Npgsql.NpgsqlCommand"/> after the command got executed once.</param>
            <returns>A Fluent API Builder for a query command.</returns>
        </member>
        <member name="T:Venflow.TypeArgumentException">
            <summary>
            Represents an error which occur when an invalid type argument gets passed to a generic method.
            </summary>
        </member>
        <member name="M:Venflow.TypeArgumentException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Venflow.TypeArgumentException.#ctor(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Venflow.TypeArgumentException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Venflow.VenflowConfiguration">
            <summary>
            Contains methods to globally set the configuration of Venflow.
            </summary>
        </member>
        <member name="P:Venflow.VenflowConfiguration.ShouldUseDeepValidation">
            <summary>
            Determines whether or not Venflow will perform more extensive validation through out its usage. This setting will be set to <see langword="true"></see> automatically, if you are in DEBUG, otherwise <see langword="false"></see>.
            </summary>
        </member>
        <member name="M:Venflow.VenflowConfiguration.UseDeepValidation(System.Boolean)">
            <summary>
            Changes the value of the <see cref="P:Venflow.VenflowConfiguration.ShouldUseDeepValidation"/> property.
            </summary>
            <param name="validation">Determines if Venflow should use deep validation or not.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.NullableAttribute">
            <summary>
            <strong>Do not use this attribute, it is reserved for the compiler.</strong>
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.NullableContextAttribute">
            <summary>
            <strong>Do not use this attribute, it is reserved for the compiler.</strong>
            </summary>
        </member>
    </members>
</doc>
